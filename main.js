(()=>{"use strict";var e={890:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(537),a=n.n(r),o=n(645),s=n.n(o)()(a());s.push([e.id,"* {\n  margin: 0;\n}\n\nbody {\n  min-height: 100vh;\n}\n\n.boards {\n  display: flex;\n  justify-content: center;\n  gap: 10rem;\n}\n\n.board-info {\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: auto 1fr;\n}\n\n.board {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  grid-template-rows: repeat(10, 1fr);\n  grid-row: 1 / 2;\n}\n\n.cell {\n  height: 2rem;\n  width: 2rem;\n  border: 1px solid black;\n}\n\n.player {\n  grid-row: 2 / 3;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.ship {\n  background-color: gray;\n}\n\n.hit {\n  background-color: red;\n}\n\n.miss {\n  background-color: aqua;\n}\n","",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA;EACE,SAAS;AACX;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,UAAU;AACZ;;AAEA;EACE,aAAa;EACb,0BAA0B;EAC1B,4BAA4B;AAC9B;;AAEA;EACE,aAAa;EACb,sCAAsC;EACtC,mCAAmC;EACnC,eAAe;AACjB;;AAEA;EACE,YAAY;EACZ,WAAW;EACX,uBAAuB;AACzB;;AAEA;EACE,eAAe;EACf,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,sBAAsB;AACxB",sourcesContent:["* {\r\n  margin: 0;\r\n}\r\n\r\nbody {\r\n  min-height: 100vh;\r\n}\r\n\r\n.boards {\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 10rem;\r\n}\r\n\r\n.board-info {\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  grid-template-rows: auto 1fr;\r\n}\r\n\r\n.board {\r\n  display: grid;\r\n  grid-template-columns: repeat(10, 1fr);\r\n  grid-template-rows: repeat(10, 1fr);\r\n  grid-row: 1 / 2;\r\n}\r\n\r\n.cell {\r\n  height: 2rem;\r\n  width: 2rem;\r\n  border: 1px solid black;\r\n}\r\n\r\n.player {\r\n  grid-row: 2 / 3;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.ship {\r\n  background-color: gray;\r\n}\r\n\r\n.hit {\r\n  background-color: red;\r\n}\r\n\r\n.miss {\r\n  background-color: aqua;\r\n}\r\n"],sourceRoot:""}]);const i=s},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var i=0;i<this.length;i++){var l=this[i][0];null!=l&&(s[l]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);r&&s[d[0]]||(void 0!==o&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=o),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},s=[],i=0;i<e.length;i++){var l=e[i],c=r.base?l[0]+r.base:l[0],d=o[c]||0,u="".concat(c," ").concat(d);o[c]=d+1;var p=n(u),A={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)t[p].references++,t[p].updater(A);else{var f=a(A,r);r.byIndex=i,t.splice(i,0,{identifier:u,updater:f,references:1})}s.push(u)}return s}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var s=0;s<o.length;s++){var i=n(o[s]);t[i].references--}for(var l=r(e,a),c=0;c<o.length;c++){var d=n(o[c]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}o=l}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{const e=()=>{const e=(()=>{const e=[],t=[],n=[],r=(()=>{const e=[];for(let t=0;t<10;t+=1){const t=[];for(let e=0;e<10;e+=1)t[e]=null;e.push(t)}return e})();return{getCells:()=>r,placeShip:(e,t,a,o)=>{const s=(e=>{let t=0;return{length:e,hit:()=>{t+=1},getHits:()=>t,isSunk:()=>e===t}})(e);if("horizontal"===o)for(let n=a,o=0;o<e;n+=1,o+=1)r[t][n]=s;if("vertical"===o)for(let n=t,o=0;o<e;n+=1,o+=1)r[n][a]=s;n.push(s)},receiveAttack:(n,a)=>{t.push([n,a]);const o=r[n][a];o?o.hit():e.push([n,a])},getMissedAttacks:()=>e,allShipsSunk:()=>n.every((e=>e.isSunk())),getAllMoves:()=>t,getEmptyPositions:()=>{const e=[];for(let t=0;t<9;t+=1)for(let n=0;n<9;n+=1)null===r[t][n]&&e.push([t,n]);return e},getTakenPositions:()=>{const e=[];for(let t=0;t<9;t+=1)for(let n=0;n<9;n+=1)null!==r[t][n]&&e.push([t,n]);return e}}})();let t=!1;return{sendAttack:(e,t)=>{const[n,r]=t;e.receiveAttack(n,r)},getRandomMove:()=>[Math.floor(10*Math.random()),Math.floor(10*Math.random())],isTurn:()=>t,startTurn:()=>{t=!0},endTurn:()=>{t=!1},getBoard:()=>e}},t=(()=>{const n=e(),r=e(),o=n.getBoard(),s=r.getBoard();return{getPlayer:()=>n,getEnemy:()=>r,isOver:()=>o.allShipsSunk()||s.allShipsSunk(),playRound:(e,i)=>{let l=parseInt(e.dataset.row,10),c=parseInt(e.dataset.col,10);if(n.sendAttack(s,[l,c]),a.updateCellState(s,e),!s.getCells()[l][c]&&!t.isOver())do{let t;do{t=r.getRandomMove()}while(o.getAllMoves().some((e=>e[0]===t[0]&&e[1]===t[1])));r.sendAttack(o,t),[l,c]=t,e=i.querySelector(`.cell[data-row="${l}"][data-col="${c}"]`),a.updateCellState(o,e)}while(o.getCells()[l][c]&&!t.isOver())},switchTurn:()=>{n.isTurn()?(n.endTurn(),r.startTurn()):(r.endTurn(),n.startTurn())}}})(),r=t,a=(()=>{const e=document.querySelectorAll(".board"),t=document.getElementById("player-board");return document.getElementById("enemy-board").addEventListener("click",(e=>{let n=e.target.closest(".cell");n&&(r.isOver()||n.classList.contains("hit")||n.classList.contains("miss")||r.playRound(n,t))})),{addBoardCells:()=>{e.forEach((e=>{for(let t=0;t<10;t+=1)for(let n=0;n<10;n+=1){const r=document.createElement("div");r.classList.add("cell"),r.setAttribute("data-row",t),r.setAttribute("data-col",n),e.appendChild(r)}}))},displayShips:e=>{for(const[n,r]of e.getTakenPositions())t.querySelector(`.cell[data-row="${n}"][data-col="${r}"]`).classList.add("ship")},updateCellState:(e,t)=>{e.getTakenPositions().some((e=>e[0]===parseInt(t.dataset.row,10)&&e[1]===parseInt(t.dataset.col,10)))?t.classList.add("hit"):t.classList.add("miss")}}})();var o=n(379),s=n.n(o),i=n(795),l=n.n(i),c=n(569),d=n.n(c),u=n(565),p=n.n(u),A=n(216),f=n.n(A),h=n(589),m=n.n(h),g=n(890),v={};v.styleTagTransform=m(),v.setAttributes=p(),v.insert=d().bind(null,"head"),v.domAPI=l(),v.insertStyleElement=f(),s()(g.Z,v),g.Z&&g.Z.locals&&g.Z.locals,a.addBoardCells();const y=r.getPlayer(),C=r.getEnemy(),E=y.getBoard(),b=C.getBoard();E.placeShip(5,0,0,"horizontal"),E.placeShip(4,2,0,"horizontal"),E.placeShip(3,4,0,"horizontal"),E.placeShip(3,6,0,"horizontal"),E.placeShip(2,8,0,"horizontal"),b.placeShip(5,0,0,"horizontal"),b.placeShip(4,2,0,"horizontal"),b.placeShip(3,4,0,"horizontal"),b.placeShip(3,6,0,"horizontal"),b.placeShip(2,8,0,"horizontal"),a.displayShips(E),y.startTurn()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QXFCLElBRWhCLElBQUksSUFBUy9DLEdBS0osS0FBVyxJQUFRaUosUUFBUyxJQUFRQSxPQ3JCMUQsRUFBSUosZ0JBR0osTUFBTXZCLEVBQVMsRUFBS0ksWUFDZEgsRUFBUSxFQUFLSSxXQUdiSCxFQUFjRixFQUFPRixXQUNyQkssRUFBYUYsRUFBTUgsV0FHekJJLEVBQVloQyxVQUFVLEVBQUcsRUFBRyxFQUFHLGNBQy9CZ0MsRUFBWWhDLFVBQVUsRUFBRyxFQUFHLEVBQUcsY0FDL0JnQyxFQUFZaEMsVUFBVSxFQUFHLEVBQUcsRUFBRyxjQUMvQmdDLEVBQVloQyxVQUFVLEVBQUcsRUFBRyxFQUFHLGNBQy9CZ0MsRUFBWWhDLFVBQVUsRUFBRyxFQUFHLEVBQUcsY0FFL0JpQyxFQUFXakMsVUFBVSxFQUFHLEVBQUcsRUFBRyxjQUM5QmlDLEVBQVdqQyxVQUFVLEVBQUcsRUFBRyxFQUFHLGNBQzlCaUMsRUFBV2pDLFVBQVUsRUFBRyxFQUFHLEVBQUcsY0FDOUJpQyxFQUFXakMsVUFBVSxFQUFHLEVBQUcsRUFBRyxjQUM5QmlDLEVBQVdqQyxVQUFVLEVBQUcsRUFBRyxFQUFHLGNBRTlCLEVBQUl3RCxhQUFheEIsR0FHakJGLEVBQU9KLFciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3N0eWxlcy9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL1NoaXAuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9QbGF5ZXIuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9HYW1lYm9hcmQuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9HYW1lLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvRE9NLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc3R5bGVzL3N0eWxlLmNzcz9mZjk0Iiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYCoge1xyXG4gIG1hcmdpbjogMDtcclxufVxyXG5cclxuYm9keSB7XHJcbiAgbWluLWhlaWdodDogMTAwdmg7XHJcbn1cclxuXHJcbi5ib2FyZHMge1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgZ2FwOiAxMHJlbTtcclxufVxyXG5cclxuLmJvYXJkLWluZm8ge1xyXG4gIGRpc3BsYXk6IGdyaWQ7XHJcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnI7XHJcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiBhdXRvIDFmcjtcclxufVxyXG5cclxuLmJvYXJkIHtcclxuICBkaXNwbGF5OiBncmlkO1xyXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDEwLCAxZnIpO1xyXG4gIGdyaWQtdGVtcGxhdGUtcm93czogcmVwZWF0KDEwLCAxZnIpO1xyXG4gIGdyaWQtcm93OiAxIC8gMjtcclxufVxyXG5cclxuLmNlbGwge1xyXG4gIGhlaWdodDogMnJlbTtcclxuICB3aWR0aDogMnJlbTtcclxuICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcclxufVxyXG5cclxuLnBsYXllciB7XHJcbiAgZ3JpZC1yb3c6IDIgLyAzO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxufVxyXG5cclxuLnNoaXAge1xyXG4gIGJhY2tncm91bmQtY29sb3I6IGdyYXk7XHJcbn1cclxuXHJcbi5oaXQge1xyXG4gIGJhY2tncm91bmQtY29sb3I6IHJlZDtcclxufVxyXG5cclxuLm1pc3Mge1xyXG4gIGJhY2tncm91bmQtY29sb3I6IGFxdWE7XHJcbn1cclxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL3N0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLFNBQVM7QUFDWDs7QUFFQTtFQUNFLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLGFBQWE7RUFDYix1QkFBdUI7RUFDdkIsVUFBVTtBQUNaOztBQUVBO0VBQ0UsYUFBYTtFQUNiLDBCQUEwQjtFQUMxQiw0QkFBNEI7QUFDOUI7O0FBRUE7RUFDRSxhQUFhO0VBQ2Isc0NBQXNDO0VBQ3RDLG1DQUFtQztFQUNuQyxlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsWUFBWTtFQUNaLFdBQVc7RUFDWCx1QkFBdUI7QUFDekI7O0FBRUE7RUFDRSxlQUFlO0VBQ2YsYUFBYTtFQUNiLHVCQUF1QjtFQUN2QixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSxxQkFBcUI7QUFDdkI7O0FBRUE7RUFDRSxzQkFBc0I7QUFDeEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiKiB7XFxyXFxuICBtYXJnaW46IDA7XFxyXFxufVxcclxcblxcclxcbmJvZHkge1xcclxcbiAgbWluLWhlaWdodDogMTAwdmg7XFxyXFxufVxcclxcblxcclxcbi5ib2FyZHMge1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgZ2FwOiAxMHJlbTtcXHJcXG59XFxyXFxuXFxyXFxuLmJvYXJkLWluZm8ge1xcclxcbiAgZGlzcGxheTogZ3JpZDtcXHJcXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyO1xcclxcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiBhdXRvIDFmcjtcXHJcXG59XFxyXFxuXFxyXFxuLmJvYXJkIHtcXHJcXG4gIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgxMCwgMWZyKTtcXHJcXG4gIGdyaWQtdGVtcGxhdGUtcm93czogcmVwZWF0KDEwLCAxZnIpO1xcclxcbiAgZ3JpZC1yb3c6IDEgLyAyO1xcclxcbn1cXHJcXG5cXHJcXG4uY2VsbCB7XFxyXFxuICBoZWlnaHQ6IDJyZW07XFxyXFxuICB3aWR0aDogMnJlbTtcXHJcXG4gIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xcclxcbn1cXHJcXG5cXHJcXG4ucGxheWVyIHtcXHJcXG4gIGdyaWQtcm93OiAyIC8gMztcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5zaGlwIHtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IGdyYXk7XFxyXFxufVxcclxcblxcclxcbi5oaXQge1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogcmVkO1xcclxcbn1cXHJcXG5cXHJcXG4ubWlzcyB7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBhcXVhO1xcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB1cGRhdGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiY29uc3QgU2hpcCA9IChsZW5ndGgpID0+IHtcclxuICAvLyBoaXRzIHN0YXJ0IGF0IDBcclxuICBsZXQgaGl0cyA9IDA7XHJcblxyXG4gIC8vIGluY3JlbWVudHMgbnVtYmVyIG9mIGhpdHMgb24gYSBzaGlwXHJcbiAgY29uc3QgaGl0ID0gKCkgPT4ge1xyXG4gICAgaGl0cyArPSAxO1xyXG4gIH07XHJcblxyXG4gIC8vIHJldHVybnMgbnVtYmVyIG9mIGhpdHNcclxuICBjb25zdCBnZXRIaXRzID0gKCkgPT4gaGl0cztcclxuXHJcbiAgLy8gZGV0ZXJtaW5lcyBpZiBhIHNoaXAgaGFzIHN1bmtcclxuICBjb25zdCBpc1N1bmsgPSAoKSA9PiBsZW5ndGggPT09IGhpdHM7XHJcblxyXG4gIHJldHVybiB7IGxlbmd0aCwgaGl0LCBnZXRIaXRzLCBpc1N1bmsgfTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNoaXA7XHJcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXNoYWRvdyAqL1xyXG5pbXBvcnQgR2FtZWJvYXJkIGZyb20gXCIuL0dhbWVib2FyZFwiO1xyXG5cclxuY29uc3QgUGxheWVyID0gKCkgPT4ge1xyXG4gIGNvbnN0IGJvYXJkID0gR2FtZWJvYXJkKCk7XHJcbiAgbGV0IHR1cm4gPSBmYWxzZTtcclxuXHJcbiAgY29uc3Qgc2VuZEF0dGFjayA9IChib2FyZCwgY29vcmRzKSA9PiB7XHJcbiAgICBjb25zdCBbcm93LCBjb2xdID0gY29vcmRzO1xyXG5cclxuICAgIGJvYXJkLnJlY2VpdmVBdHRhY2socm93LCBjb2wpO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IGdldFJhbmRvbU1vdmUgPSAoKSA9PiB7XHJcbiAgICBjb25zdCByb3cgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCk7XHJcbiAgICBjb25zdCBjb2wgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCk7XHJcblxyXG4gICAgcmV0dXJuIFtyb3csIGNvbF07XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgaXNUdXJuID0gKCkgPT4gdHVybjtcclxuXHJcbiAgY29uc3Qgc3RhcnRUdXJuID0gKCkgPT4ge1xyXG4gICAgdHVybiA9IHRydWU7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgZW5kVHVybiA9ICgpID0+IHtcclxuICAgIHR1cm4gPSBmYWxzZTtcclxuICB9O1xyXG5cclxuICBjb25zdCBnZXRCb2FyZCA9ICgpID0+IGJvYXJkO1xyXG5cclxuICByZXR1cm4geyBzZW5kQXR0YWNrLCBnZXRSYW5kb21Nb3ZlLCBpc1R1cm4sIHN0YXJ0VHVybiwgZW5kVHVybiwgZ2V0Qm9hcmQgfTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFBsYXllcjtcclxuIiwiaW1wb3J0IFNoaXAgZnJvbSBcIi4vU2hpcFwiO1xyXG5cclxuY29uc3QgR2FtZWJvYXJkID0gKCkgPT4ge1xyXG4gIC8vIG1pc3NlZCBhdHRhY2tzIGFycmF5XHJcbiAgY29uc3QgbWlzc2VkQXR0YWNrcyA9IFtdO1xyXG5cclxuICAvLyBrZWVwIHRyYWNrIG9mIHdoZXJlIG1vdmVzIHdlcmUgbWFkZVxyXG4gIGNvbnN0IG1vdmVzID0gW107XHJcblxyXG4gIC8vIGtlZXBzIHRyYWNrIG9mIHNoaXBzIG9uIHRoZSBib2FyZFxyXG4gIGNvbnN0IHNoaXBzID0gW107XHJcblxyXG4gIC8vIENyZWF0ZXMgYm9hcmQuIFNwb3RzIHRoYXQgaGF2ZW4ndCBiZWVuIGNoZWNrZWQgYXJlIG51bGwuXHJcbiAgY29uc3QgY3JlYXRlQm9hcmQgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBicmQgPSBbXTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTA7IGkgKz0gMSkge1xyXG4gICAgICBjb25zdCByb3cgPSBbXTtcclxuICAgICAgZm9yIChsZXQgY29sID0gMDsgY29sIDwgMTA7IGNvbCArPSAxKSB7XHJcbiAgICAgICAgcm93W2NvbF0gPSBudWxsO1xyXG4gICAgICB9XHJcbiAgICAgIGJyZC5wdXNoKHJvdyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGJyZDtcclxuICB9O1xyXG5cclxuICAvLyBjcmVhdGVzIGEgbmV3IGJvYXJkXHJcbiAgY29uc3QgYm9hcmQgPSBjcmVhdGVCb2FyZCgpO1xyXG5cclxuICAvLyBnZXQgY3VycmVudCBib2FyZCBjZWxsc1xyXG4gIGNvbnN0IGdldENlbGxzID0gKCkgPT4gYm9hcmQ7XHJcblxyXG4gIC8vIFBsYWNlcyBhIHNoaXAgYXQgc3BlY2lmaWVkIGNvb3JkaW5hdGVzIGFuZCBvbiBhIHNwZWNpZmllZCBheGlzIChmb3Igbm93IHdlIHdvbid0IHZlcmlmeSB0aGUgcG9zaXRpb24gaGVyZSlcclxuICBjb25zdCBwbGFjZVNoaXAgPSAobGVuZ3RoLCByb3csIGNvbCwgYXhpcykgPT4ge1xyXG4gICAgY29uc3Qgc2hpcCA9IFNoaXAobGVuZ3RoKTtcclxuXHJcbiAgICAvLyBpZiBvbiBob3Jpem9udGFsIGF4aXNcclxuICAgIGlmIChheGlzID09PSBcImhvcml6b250YWxcIikge1xyXG4gICAgICBmb3IgKGxldCBpID0gY29sLCBqID0gMDsgaiA8IGxlbmd0aDsgaSArPSAxLCBqICs9IDEpIHtcclxuICAgICAgICBib2FyZFtyb3ddW2ldID0gc2hpcDtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIGlmIG9uIHZlcnRpY2FsIGF4aXNcclxuICAgIGlmIChheGlzID09PSBcInZlcnRpY2FsXCIpIHtcclxuICAgICAgZm9yIChsZXQgaSA9IHJvdywgaiA9IDA7IGogPCBsZW5ndGg7IGkgKz0gMSwgaiArPSAxKSB7XHJcbiAgICAgICAgYm9hcmRbaV1bY29sXSA9IHNoaXA7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBhZGQgc2hpcCB0byBhcnJheVxyXG4gICAgc2hpcHMucHVzaChzaGlwKTtcclxuICB9O1xyXG5cclxuICBjb25zdCByZWNlaXZlQXR0YWNrID0gKHJvdywgY29sKSA9PiB7XHJcbiAgICAvLyBhZGQgbW92ZSB0byBtb3ZlcyBhcnJheVxyXG4gICAgbW92ZXMucHVzaChbcm93LCBjb2xdKTtcclxuXHJcbiAgICBjb25zdCBwb3NpdGlvbiA9IGJvYXJkW3Jvd11bY29sXTtcclxuXHJcbiAgICAvLyBpZiBhIHNoaXAgZXhpc3RzIGF0IHRoZSBwb3NpdGlvbiwgaGl0IGl0XHJcbiAgICBpZiAocG9zaXRpb24pIHtcclxuICAgICAgcG9zaXRpb24uaGl0KCk7XHJcbiAgICB9XHJcbiAgICAvLyBpZiB0aGVyZSBpcyBubyBzaGlwIGF0IHRoZSBwb3NpdGlvbiwgYWRkIHRoZSBjb29yZGluYXRlcyB0byBtaXNzZWQgYXR0YWNrcyBhcnJheVxyXG4gICAgZWxzZSBtaXNzZWRBdHRhY2tzLnB1c2goW3JvdywgY29sXSk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgZ2V0TWlzc2VkQXR0YWNrcyA9ICgpID0+IG1pc3NlZEF0dGFja3M7XHJcblxyXG4gIGNvbnN0IGdldEFsbE1vdmVzID0gKCkgPT4gbW92ZXM7XHJcblxyXG4gIGNvbnN0IGFsbFNoaXBzU3VuayA9ICgpID0+IHNoaXBzLmV2ZXJ5KChzaGlwKSA9PiBzaGlwLmlzU3VuaygpKTtcclxuXHJcbiAgY29uc3QgZ2V0VGFrZW5Qb3NpdGlvbnMgPSAoKSA9PiB7XHJcbiAgICBjb25zdCB0YWtlblBvc2l0aW9ucyA9IFtdO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA5OyBpICs9IDEpIHtcclxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCA5OyBqICs9IDEpIHtcclxuICAgICAgICBpZiAoYm9hcmRbaV1bal0gIT09IG51bGwpIHRha2VuUG9zaXRpb25zLnB1c2goW2ksIGpdKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRha2VuUG9zaXRpb25zO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IGdldEVtcHR5UG9zaXRpb25zID0gKCkgPT4ge1xyXG4gICAgY29uc3QgZW1wdHlQb3NpdGlvbnMgPSBbXTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgOTsgaSArPSAxKSB7XHJcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgOTsgaiArPSAxKSB7XHJcbiAgICAgICAgaWYgKGJvYXJkW2ldW2pdID09PSBudWxsKSBlbXB0eVBvc2l0aW9ucy5wdXNoKFtpLCBqXSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBlbXB0eVBvc2l0aW9ucztcclxuICB9O1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgZ2V0Q2VsbHMsXHJcbiAgICBwbGFjZVNoaXAsXHJcbiAgICByZWNlaXZlQXR0YWNrLFxyXG4gICAgZ2V0TWlzc2VkQXR0YWNrcyxcclxuICAgIGFsbFNoaXBzU3VuayxcclxuICAgIGdldEFsbE1vdmVzLFxyXG4gICAgZ2V0RW1wdHlQb3NpdGlvbnMsXHJcbiAgICBnZXRUYWtlblBvc2l0aW9ucyxcclxuICB9O1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgR2FtZWJvYXJkO1xyXG4iLCJpbXBvcnQgUGxheWVyIGZyb20gXCIuL1BsYXllclwiO1xyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWN5Y2xlXHJcbmltcG9ydCBET00gZnJvbSBcIi4vRE9NXCI7XHJcblxyXG5jb25zdCBHYW1lID0gKCgpID0+IHtcclxuICAvLyBjcmVhdGUgcGxheWVyIG9iamVjdHNcclxuICBjb25zdCBwbGF5ZXIgPSBQbGF5ZXIoKTtcclxuICBjb25zdCBlbmVteSA9IFBsYXllcigpO1xyXG5cclxuICBjb25zdCBwbGF5ZXJCb2FyZCA9IHBsYXllci5nZXRCb2FyZCgpO1xyXG4gIGNvbnN0IGVuZW15Qm9hcmQgPSBlbmVteS5nZXRCb2FyZCgpO1xyXG5cclxuICBjb25zdCBnZXRQbGF5ZXIgPSAoKSA9PiBwbGF5ZXI7XHJcblxyXG4gIGNvbnN0IGdldEVuZW15ID0gKCkgPT4gZW5lbXk7XHJcblxyXG4gIGNvbnN0IHN3aXRjaFR1cm4gPSAoKSA9PiB7XHJcbiAgICBpZiAocGxheWVyLmlzVHVybigpKSB7XHJcbiAgICAgIHBsYXllci5lbmRUdXJuKCk7XHJcbiAgICAgIGVuZW15LnN0YXJ0VHVybigpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZW5lbXkuZW5kVHVybigpO1xyXG4gICAgICBwbGF5ZXIuc3RhcnRUdXJuKCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgaXNPdmVyID0gKCkgPT4gcGxheWVyQm9hcmQuYWxsU2hpcHNTdW5rKCkgfHwgZW5lbXlCb2FyZC5hbGxTaGlwc1N1bmsoKTtcclxuXHJcbiAgY29uc3QgcGxheVJvdW5kID0gKGNlbGwsIHBsYXllckJvYXJkQ29udGFpbmVyKSA9PiB7XHJcbiAgICBsZXQgcm93ID0gcGFyc2VJbnQoY2VsbC5kYXRhc2V0LnJvdywgMTApO1xyXG4gICAgbGV0IGNvbCA9IHBhcnNlSW50KGNlbGwuZGF0YXNldC5jb2wsIDEwKTtcclxuXHJcbiAgICAvLyBwbGF5ZXIgbWFrZXMgbW92ZVxyXG4gICAgcGxheWVyLnNlbmRBdHRhY2soZW5lbXlCb2FyZCwgW3JvdywgY29sXSk7XHJcblxyXG4gICAgRE9NLnVwZGF0ZUNlbGxTdGF0ZShlbmVteUJvYXJkLCBjZWxsKTtcclxuXHJcbiAgICAvLyBpZiB0aGUgYXR0YWNrIG1pc3NlZCBhbmQgdGhlIGdhbWUgaXMgbm90IG92ZXIsIHN3aXRjaCB0dXJuc1xyXG4gICAgaWYgKCFlbmVteUJvYXJkLmdldENlbGxzKClbcm93XVtjb2xdICYmICFHYW1lLmlzT3ZlcigpKSB7XHJcbiAgICAgIC8vIGVuZW15IHRha2VzIHNob3RzIHVudGlsIHRoZXkgbWlzcyBvciB0aGUgZ2FtZSBlbmRzXHJcbiAgICAgIGRvIHtcclxuICAgICAgICAvLyB3aGlsZSB0aGVyZSBpcyBub3QgYSBuZXcgbW92ZSBnZW5lcmF0ZWQsIGdlbmVyYXRlIGEgbmV3IG1vdmVcclxuICAgICAgICBsZXQgcmFuZG9tUG9zaXRpb247XHJcbiAgICAgICAgZG8ge1xyXG4gICAgICAgICAgLy8gZ2V0IHJhbmRvbSBwb3NpdGlvbiBmb3IgZW5lbXkgbW92ZVxyXG4gICAgICAgICAgcmFuZG9tUG9zaXRpb24gPSBlbmVteS5nZXRSYW5kb21Nb3ZlKCk7XHJcbiAgICAgICAgfSB3aGlsZSAoXHJcbiAgICAgICAgICBwbGF5ZXJCb2FyZC5nZXRBbGxNb3ZlcygpLnNvbWUoXHJcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb29wLWZ1bmNcclxuICAgICAgICAgICAgKHBvc2l0aW9uKSA9PlxyXG4gICAgICAgICAgICAgIHBvc2l0aW9uWzBdID09PSByYW5kb21Qb3NpdGlvblswXSAmJlxyXG4gICAgICAgICAgICAgIHBvc2l0aW9uWzFdID09PSByYW5kb21Qb3NpdGlvblsxXVxyXG4gICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGVuZW15LnNlbmRBdHRhY2socGxheWVyQm9hcmQsIHJhbmRvbVBvc2l0aW9uKTtcclxuXHJcbiAgICAgICAgW3JvdywgY29sXSA9IHJhbmRvbVBvc2l0aW9uO1xyXG5cclxuICAgICAgICAvLyB1cGRhdGUgcGxheWVyIGJvYXJkIGFmdGVyIGVuZW15J3MgdHVyblxyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxyXG4gICAgICAgIGNlbGwgPSBwbGF5ZXJCb2FyZENvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgICAgYC5jZWxsW2RhdGEtcm93PVwiJHtyb3d9XCJdW2RhdGEtY29sPVwiJHtjb2x9XCJdYFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgRE9NLnVwZGF0ZUNlbGxTdGF0ZShwbGF5ZXJCb2FyZCwgY2VsbCk7XHJcbiAgICAgIH0gd2hpbGUgKHBsYXllckJvYXJkLmdldENlbGxzKClbcm93XVtjb2xdICYmICFHYW1lLmlzT3ZlcigpKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICByZXR1cm4geyBnZXRQbGF5ZXIsIGdldEVuZW15LCBpc092ZXIsIHBsYXlSb3VuZCwgc3dpdGNoVHVybiB9O1xyXG59KSgpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgR2FtZTtcclxuXHJcbi8vIGZhY3RvcnkgZnVuY3Rpb24gdGhhdCBoYXMgc3RhdGUgYW5kIGZ1bmN0aW9ucy5cclxuLy8gRE9NIG5lZWRzIHRvIGNhbGwgZnJvbSB5b3VyIGdhbWUgb2JqZWN0IHRvIHN0YXJ0IHRoZSBnYW1lLCB3aGF0IGdhbWUgb2JqZWN0IHdvdWxkIGRvIHdoZW4gYSBjZWxsIGlzIGNsaWNrZWQgaW4gdGhlIFVJLlxyXG4vLyBtYWtlIGFjdGlvbiBhbmQgcmV0cmlldmUgc3RhdGVzXHJcbi8vIFVwZGF0ZSBib2FyZCBzdGF0ZXNcclxuIiwiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1jeWNsZVxyXG5pbXBvcnQgR2FtZSBmcm9tIFwiLi9HYW1lXCI7XHJcblxyXG5jb25zdCBET00gPSAoKCkgPT4ge1xyXG4gIGNvbnN0IGJvYXJkQ29udGFpbmVycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuYm9hcmRcIik7XHJcbiAgY29uc3QgcGxheWVyQm9hcmRDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBsYXllci1ib2FyZFwiKTtcclxuICBjb25zdCBlbmVteUJvYXJkQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJlbmVteS1ib2FyZFwiKTtcclxuXHJcbiAgY29uc3QgYWRkQm9hcmRDZWxscyA9ICgpID0+IHtcclxuICAgIGJvYXJkQ29udGFpbmVycy5mb3JFYWNoKChib2FyZCkgPT4ge1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpICs9IDEpIHtcclxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDEwOyBqICs9IDEpIHtcclxuICAgICAgICAgIGNvbnN0IGNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKFwiY2VsbFwiKTtcclxuICAgICAgICAgIGNlbGwuc2V0QXR0cmlidXRlKFwiZGF0YS1yb3dcIiwgaSk7XHJcbiAgICAgICAgICBjZWxsLnNldEF0dHJpYnV0ZShcImRhdGEtY29sXCIsIGopO1xyXG4gICAgICAgICAgYm9hcmQuYXBwZW5kQ2hpbGQoY2VsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICAvLyBmdW5jdGlvbiB1c2VkIHRvIGRpc3BsYXkgcGxheWVyIHNoaXBzXHJcbiAgY29uc3QgZGlzcGxheVNoaXBzID0gKGJvYXJkKSA9PiB7XHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcclxuICAgIGZvciAoY29uc3QgW3JvdywgY29sXSBvZiBib2FyZC5nZXRUYWtlblBvc2l0aW9ucygpKSB7XHJcbiAgICAgIGNvbnN0IHRhcmdldENlbGwgPSBwbGF5ZXJCb2FyZENvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgIGAuY2VsbFtkYXRhLXJvdz1cIiR7cm93fVwiXVtkYXRhLWNvbD1cIiR7Y29sfVwiXWBcclxuICAgICAgKTtcclxuXHJcbiAgICAgIHRhcmdldENlbGwuY2xhc3NMaXN0LmFkZChcInNoaXBcIik7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgdXBkYXRlQ2VsbFN0YXRlID0gKGJvYXJkLCBjZWxsKSA9PiB7XHJcbiAgICAvLyBpZiB0aGUgY2VsbCBpcyB0YWtlbiBjcmVhdGUgYSB2YXJpYWJsZSBmb3IgaXRcclxuICAgIGNvbnN0IHRha2VuQ2VsbCA9IGJvYXJkXHJcbiAgICAgIC5nZXRUYWtlblBvc2l0aW9ucygpXHJcbiAgICAgIC5zb21lKFxyXG4gICAgICAgIChwb3NpdGlvbikgPT5cclxuICAgICAgICAgIHBvc2l0aW9uWzBdID09PSBwYXJzZUludChjZWxsLmRhdGFzZXQucm93LCAxMCkgJiZcclxuICAgICAgICAgIHBvc2l0aW9uWzFdID09PSBwYXJzZUludChjZWxsLmRhdGFzZXQuY29sLCAxMClcclxuICAgICAgKTtcclxuXHJcbiAgICAvLyBhZGQgYXBwcm9wcmlhdGUgY2xhc3MgdG8gY2VsbFxyXG4gICAgaWYgKHRha2VuQ2VsbCkgY2VsbC5jbGFzc0xpc3QuYWRkKFwiaGl0XCIpO1xyXG4gICAgZWxzZSBjZWxsLmNsYXNzTGlzdC5hZGQoXCJtaXNzXCIpO1xyXG4gIH07XHJcblxyXG4gIGVuZW15Qm9hcmRDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XHJcbiAgICBsZXQgY2VsbCA9IGUudGFyZ2V0LmNsb3Nlc3QoXCIuY2VsbFwiKTtcclxuXHJcbiAgICAvLyBpZiBubyBjZWxsIHdhcyBjbGlja2VkIGRvIG5vdGhpbmdcclxuICAgIGlmICghY2VsbCkgcmV0dXJuO1xyXG5cclxuICAgIC8vIGRvbid0IGV4ZWN1dGUgZXZlbnQgaWYgZ2FtZSBpcyBvdmVyIE9SIHRoZSBib3ggaGFzIGFscmVhZHkgYmVlbiBjbGlja2VkXHJcbiAgICBpZiAoXHJcbiAgICAgIEdhbWUuaXNPdmVyKCkgfHxcclxuICAgICAgY2VsbC5jbGFzc0xpc3QuY29udGFpbnMoXCJoaXRcIikgfHxcclxuICAgICAgY2VsbC5jbGFzc0xpc3QuY29udGFpbnMoXCJtaXNzXCIpXHJcbiAgICApXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICAvLyBjb25zdCBwbGF5ZXIgPSBHYW1lLmdldFBsYXllcigpO1xyXG4gICAgLy8gY29uc3QgZW5lbXkgPSBHYW1lLmdldEVuZW15KCk7XHJcblxyXG4gICAgLy8gY29uc3QgcGxheWVyQm9hcmQgPSBwbGF5ZXIuZ2V0Qm9hcmQoKTtcclxuICAgIC8vIGNvbnN0IGVuZW15Qm9hcmQgPSBlbmVteS5nZXRCb2FyZCgpO1xyXG5cclxuICAgIC8vIGZyb20gaGVyZSwgY2FsbCBwbGF5Um91bmQgYW5kIHBhc3MgRE9NIGl0ZW1zIGFzIGFyZ3VtZW50c1xyXG4gICAgR2FtZS5wbGF5Um91bmQoY2VsbCwgcGxheWVyQm9hcmRDb250YWluZXIpXHJcblxyXG4gICAgLy8gbGV0IHJvdyA9IHBhcnNlSW50KGNlbGwuZGF0YXNldC5yb3csIDEwKTtcclxuICAgIC8vIGxldCBjb2wgPSBwYXJzZUludChjZWxsLmRhdGFzZXQuY29sLCAxMCk7XHJcblxyXG4gICAgLy8gLy8gcGxheWVyIG1ha2VzIG1vdmVcclxuICAgIC8vIHBsYXllci5zZW5kQXR0YWNrKGVuZW15Qm9hcmQsIFtyb3csIGNvbF0pO1xyXG5cclxuICAgIC8vIHVwZGF0ZUNlbGxTdGF0ZShlbmVteUJvYXJkLCBjZWxsKTtcclxuXHJcbiAgICAvLyAvLyBpZiB0aGUgYXR0YWNrIG1pc3NlZCBhbmQgdGhlIGdhbWUgaXMgbm90IG92ZXIsIHN3aXRjaCB0dXJuc1xyXG4gICAgLy8gaWYgKCFlbmVteUJvYXJkLmdldENlbGxzKClbcm93XVtjb2xdICYmICFHYW1lLmlzT3ZlcigpKSB7XHJcbiAgICAvLyAgIC8vIGVuZW15IHRha2VzIHNob3RzIHVudGlsIHRoZXkgbWlzcyBvciB0aGUgZ2FtZSBlbmRzXHJcbiAgICAvLyAgIGRvIHtcclxuICAgIC8vICAgICAvLyB3aGlsZSB0aGVyZSBpcyBub3QgYSBuZXcgbW92ZSBnZW5lcmF0ZWQsIGdlbmVyYXRlIGEgbmV3IG1vdmVcclxuICAgIC8vICAgICBsZXQgcmFuZG9tUG9zaXRpb247XHJcbiAgICAvLyAgICAgZG8ge1xyXG4gICAgLy8gICAgICAgLy8gZ2V0IHJhbmRvbSBwb3NpdGlvbiBmb3IgZW5lbXkgbW92ZVxyXG4gICAgLy8gICAgICAgcmFuZG9tUG9zaXRpb24gPSBlbmVteS5nZXRSYW5kb21Nb3ZlKCk7XHJcbiAgICAvLyAgICAgfSB3aGlsZSAoXHJcbiAgICAvLyAgICAgICBwbGF5ZXJCb2FyZC5nZXRBbGxNb3ZlcygpLnNvbWUoXHJcbiAgICAvLyAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb29wLWZ1bmNcclxuICAgIC8vICAgICAgICAgKHBvc2l0aW9uKSA9PlxyXG4gICAgLy8gICAgICAgICAgIHBvc2l0aW9uWzBdID09PSByYW5kb21Qb3NpdGlvblswXSAmJlxyXG4gICAgLy8gICAgICAgICAgIHBvc2l0aW9uWzFdID09PSByYW5kb21Qb3NpdGlvblsxXVxyXG4gICAgLy8gICAgICAgKVxyXG4gICAgLy8gICAgICk7XHJcblxyXG4gICAgLy8gICAgIGVuZW15LnNlbmRBdHRhY2socGxheWVyQm9hcmQsIHJhbmRvbVBvc2l0aW9uKTtcclxuXHJcbiAgICAvLyAgICAgW3JvdywgY29sXSA9IHJhbmRvbVBvc2l0aW9uO1xyXG5cclxuICAgIC8vICAgICAvLyB1cGRhdGUgcGxheWVyIGJvYXJkIGFmdGVyIGVuZW15J3MgdHVyblxyXG4gICAgLy8gICAgIGNlbGwgPSBwbGF5ZXJCb2FyZENvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFxyXG4gICAgLy8gICAgICAgYC5jZWxsW2RhdGEtcm93PVwiJHtyb3d9XCJdW2RhdGEtY29sPVwiJHtjb2x9XCJdYFxyXG4gICAgLy8gICAgICk7XHJcbiAgICAvLyAgICAgdXBkYXRlQ2VsbFN0YXRlKHBsYXllckJvYXJkLCBjZWxsKTtcclxuICAgIC8vICAgfSB3aGlsZSAocGxheWVyQm9hcmQuZ2V0Q2VsbHMoKVtyb3ddW2NvbF0gJiYgIUdhbWUuaXNPdmVyKCkpO1xyXG4gICAgLy8gfVxyXG4gIH0pO1xyXG5cclxuICByZXR1cm4geyBhZGRCb2FyZENlbGxzLCBkaXNwbGF5U2hpcHMsIHVwZGF0ZUNlbGxTdGF0ZSB9O1xyXG59KSgpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgRE9NO1xyXG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgRE9NIGZyb20gXCIuL0RPTVwiO1xyXG5pbXBvcnQgR2FtZSBmcm9tIFwiLi9HYW1lXCI7XHJcbmltcG9ydCBcIi4vc3R5bGVzL3N0eWxlLmNzc1wiO1xyXG5cclxuLy8gY3JlYXRlIGdhbWVib2FyZCBjZWxsc1xyXG5ET00uYWRkQm9hcmRDZWxscygpO1xyXG5cclxuLy8gYWNjZXNzIHBsYXllciBvYmplY3RzXHJcbmNvbnN0IHBsYXllciA9IEdhbWUuZ2V0UGxheWVyKCk7XHJcbmNvbnN0IGVuZW15ID0gR2FtZS5nZXRFbmVteSgpO1xyXG5cclxuLy8gYWNjZXNzIHBsYXllciBib2FyZHMgYW5kIHNldCB0byB0aGVpciBvd24gdmFyaWFibGVzXHJcbmNvbnN0IHBsYXllckJvYXJkID0gcGxheWVyLmdldEJvYXJkKCk7XHJcbmNvbnN0IGVuZW15Qm9hcmQgPSBlbmVteS5nZXRCb2FyZCgpO1xyXG5cclxuLy8gYWRkIHNoaXBzIHRvIGVhY2ggYm9hcmQgKGZvciBub3cgdXNpbmcgcHJlZGVmaW5lZCBsb2NhdGlvbnMgdG8gbWFrZSBzdXJlIGV2ZXJ5dGhpbmcgd29ya3MpXHJcbnBsYXllckJvYXJkLnBsYWNlU2hpcCg1LCAwLCAwLCBcImhvcml6b250YWxcIik7XHJcbnBsYXllckJvYXJkLnBsYWNlU2hpcCg0LCAyLCAwLCBcImhvcml6b250YWxcIik7XHJcbnBsYXllckJvYXJkLnBsYWNlU2hpcCgzLCA0LCAwLCBcImhvcml6b250YWxcIik7XHJcbnBsYXllckJvYXJkLnBsYWNlU2hpcCgzLCA2LCAwLCBcImhvcml6b250YWxcIik7XHJcbnBsYXllckJvYXJkLnBsYWNlU2hpcCgyLCA4LCAwLCBcImhvcml6b250YWxcIik7XHJcblxyXG5lbmVteUJvYXJkLnBsYWNlU2hpcCg1LCAwLCAwLCBcImhvcml6b250YWxcIik7XHJcbmVuZW15Qm9hcmQucGxhY2VTaGlwKDQsIDIsIDAsIFwiaG9yaXpvbnRhbFwiKTtcclxuZW5lbXlCb2FyZC5wbGFjZVNoaXAoMywgNCwgMCwgXCJob3Jpem9udGFsXCIpO1xyXG5lbmVteUJvYXJkLnBsYWNlU2hpcCgzLCA2LCAwLCBcImhvcml6b250YWxcIik7XHJcbmVuZW15Qm9hcmQucGxhY2VTaGlwKDIsIDgsIDAsIFwiaG9yaXpvbnRhbFwiKTtcclxuXHJcbkRPTS5kaXNwbGF5U2hpcHMocGxheWVyQm9hcmQpO1xyXG5cclxuLy8gcGxheWVyIG1ha2VzIGZpcnN0IG1vdmVcclxucGxheWVyLnN0YXJ0VHVybigpO1xyXG5cclxuXHJcbiJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsIm9wdGlvbnMiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwibmMiLCJib2FyZCIsIm1pc3NlZEF0dGFja3MiLCJtb3ZlcyIsInNoaXBzIiwiYnJkIiwicm93IiwiY29sIiwiY3JlYXRlQm9hcmQiLCJnZXRDZWxscyIsInBsYWNlU2hpcCIsImF4aXMiLCJzaGlwIiwiaGl0cyIsImhpdCIsImdldEhpdHMiLCJpc1N1bmsiLCJqIiwicmVjZWl2ZUF0dGFjayIsInBvc2l0aW9uIiwiZ2V0TWlzc2VkQXR0YWNrcyIsImFsbFNoaXBzU3VuayIsImV2ZXJ5IiwiZ2V0QWxsTW92ZXMiLCJnZXRFbXB0eVBvc2l0aW9ucyIsImVtcHR5UG9zaXRpb25zIiwiZ2V0VGFrZW5Qb3NpdGlvbnMiLCJ0YWtlblBvc2l0aW9ucyIsInR1cm4iLCJzZW5kQXR0YWNrIiwiY29vcmRzIiwiZ2V0UmFuZG9tTW92ZSIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImlzVHVybiIsInN0YXJ0VHVybiIsImVuZFR1cm4iLCJnZXRCb2FyZCIsIkdhbWUiLCJwbGF5ZXIiLCJlbmVteSIsInBsYXllckJvYXJkIiwiZW5lbXlCb2FyZCIsImdldFBsYXllciIsImdldEVuZW15IiwiaXNPdmVyIiwicGxheVJvdW5kIiwiY2VsbCIsInBsYXllckJvYXJkQ29udGFpbmVyIiwicGFyc2VJbnQiLCJkYXRhc2V0IiwidXBkYXRlQ2VsbFN0YXRlIiwicmFuZG9tUG9zaXRpb24iLCJzb21lIiwic3dpdGNoVHVybiIsImJvYXJkQ29udGFpbmVycyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJnZXRFbGVtZW50QnlJZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJjbG9zZXN0IiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJhZGRCb2FyZENlbGxzIiwiZm9yRWFjaCIsImFkZCIsImRpc3BsYXlTaGlwcyIsImxvY2FscyJdLCJzb3VyY2VSb290IjoiIn0=