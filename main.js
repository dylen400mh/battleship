(()=>{"use strict";var n={890:(n,e,t)=>{t.d(e,{Z:()=>u});var r=t(537),o=t.n(r),a=t(645),s=t.n(a),i=t(667),l=t.n(i),c=new URL(t(498),t.b),A=s()(o()),d=l()(c);A.push([n.id,`@font-face {\n  font-family: "Neuropolitical";\n  src: url(${d}) format("opentype");\n  font-weight: 600;\n  font-style: normal;\n}\n\n* {\n  margin: 0;\n  font-family:\n    "Neuropolitical",\n    system-ui,\n    -apple-system,\n    BlinkMacSystemFont,\n    "Segoe UI",\n    Roboto,\n    Oxygen,\n    Ubuntu,\n    Cantarell,\n    "Open Sans",\n    "Helvetica Neue",\n    sans-serif;\n}\n\nbody {\n  min-height: 100vh;\n}\n\n.title {\n  font-size: 4rem;\n  padding: 1rem 2rem;\n}\n\n.body {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 2rem;\n}\n\n.boards {\n  display: flex;\n  justify-content: center;\n  gap: 10rem;\n}\n\n.board-info {\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: auto 1fr;\n  gap: 0.5rem;\n}\n\n.board {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  grid-template-rows: repeat(10, 1fr);\n  grid-row: 1 / 2;\n}\n\n.cell {\n  height: 2rem;\n  width: 2rem;\n  border: 1px solid black;\n}\n\n.player {\n  grid-row: 2 / 3;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 1.3rem;\n}\n\n.ship {\n  background-color: gray;\n}\n\n.ship.dragged {\n  opacity: 0.5;\n}\n\n.hit {\n  background-color: red;\n}\n\n.miss {\n  background-color: aqua;\n}\n\n#message {\n  font-size: 1.75rem;\n}\n\n.buttons {\n  display: flex;\n  gap: 2rem;\n  justify-content: center;\n}\n\nbutton {\n  width: 10rem;\n  height: 4rem;\n  font-size: 1.5rem;\n  outline: none;\n  border: 0;\n  border-radius: 10px;\n  -webkit-box-shadow: 5px 5px 15px 5px #000000;\n  box-shadow: 5px 5px 15px 3px #000000;\n}\n\n#reset-button {\n  background: red;\n}\n\n#reset-button:hover {\n  background: rgba(255, 0, 0, 0.7);\n}\n\n#play-button {\n  background: rgb(0, 200, 0);\n}\n\n#play-button:hover {\n  background: rgba(0, 200, 0, 0.7);\n}\n\n#random-button {\n  background: rgb(230, 230, 0);\n}\n\n#random-button:hover {\n  background: rgba(230, 230, 0, 0.7);\n}\n`,"",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA;EACE,6BAA6B;EAC7B,+DAA6D;EAC7D,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;EACE,SAAS;EACT;;;;;;;;;;;;cAYY;AACd;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,SAAS;AACX;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,UAAU;AACZ;;AAEA;EACE,aAAa;EACb,0BAA0B;EAC1B,4BAA4B;EAC5B,WAAW;AACb;;AAEA;EACE,aAAa;EACb,sCAAsC;EACtC,mCAAmC;EACnC,eAAe;AACjB;;AAEA;EACE,YAAY;EACZ,WAAW;EACX,uBAAuB;AACzB;;AAEA;EACE,eAAe;EACf,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,iBAAiB;AACnB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,SAAS;EACT,uBAAuB;AACzB;;AAEA;EACE,YAAY;EACZ,YAAY;EACZ,iBAAiB;EACjB,aAAa;EACb,SAAS;EACT,mBAAmB;EACnB,4CAA4C;EAC5C,oCAAoC;AACtC;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,gCAAgC;AAClC;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,gCAAgC;AAClC;;AAEA;EACE,4BAA4B;AAC9B;;AAEA;EACE,kCAAkC;AACpC",sourcesContent:['@font-face {\r\n  font-family: "Neuropolitical";\r\n  src: url("../fonts/neuropolitical rg.otf") format("opentype");\r\n  font-weight: 600;\r\n  font-style: normal;\r\n}\r\n\r\n* {\r\n  margin: 0;\r\n  font-family:\r\n    "Neuropolitical",\r\n    system-ui,\r\n    -apple-system,\r\n    BlinkMacSystemFont,\r\n    "Segoe UI",\r\n    Roboto,\r\n    Oxygen,\r\n    Ubuntu,\r\n    Cantarell,\r\n    "Open Sans",\r\n    "Helvetica Neue",\r\n    sans-serif;\r\n}\r\n\r\nbody {\r\n  min-height: 100vh;\r\n}\r\n\r\n.title {\r\n  font-size: 4rem;\r\n  padding: 1rem 2rem;\r\n}\r\n\r\n.body {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 2rem;\r\n}\r\n\r\n.boards {\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 10rem;\r\n}\r\n\r\n.board-info {\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  grid-template-rows: auto 1fr;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.board {\r\n  display: grid;\r\n  grid-template-columns: repeat(10, 1fr);\r\n  grid-template-rows: repeat(10, 1fr);\r\n  grid-row: 1 / 2;\r\n}\r\n\r\n.cell {\r\n  height: 2rem;\r\n  width: 2rem;\r\n  border: 1px solid black;\r\n}\r\n\r\n.player {\r\n  grid-row: 2 / 3;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 1.3rem;\r\n}\r\n\r\n.ship {\r\n  background-color: gray;\r\n}\r\n\r\n.ship.dragged {\r\n  opacity: 0.5;\r\n}\r\n\r\n.hit {\r\n  background-color: red;\r\n}\r\n\r\n.miss {\r\n  background-color: aqua;\r\n}\r\n\r\n#message {\r\n  font-size: 1.75rem;\r\n}\r\n\r\n.buttons {\r\n  display: flex;\r\n  gap: 2rem;\r\n  justify-content: center;\r\n}\r\n\r\nbutton {\r\n  width: 10rem;\r\n  height: 4rem;\r\n  font-size: 1.5rem;\r\n  outline: none;\r\n  border: 0;\r\n  border-radius: 10px;\r\n  -webkit-box-shadow: 5px 5px 15px 5px #000000;\r\n  box-shadow: 5px 5px 15px 3px #000000;\r\n}\r\n\r\n#reset-button {\r\n  background: red;\r\n}\r\n\r\n#reset-button:hover {\r\n  background: rgba(255, 0, 0, 0.7);\r\n}\r\n\r\n#play-button {\r\n  background: rgb(0, 200, 0);\r\n}\r\n\r\n#play-button:hover {\r\n  background: rgba(0, 200, 0, 0.7);\r\n}\r\n\r\n#random-button {\r\n  background: rgb(230, 230, 0);\r\n}\r\n\r\n#random-button:hover {\r\n  background: rgba(230, 230, 0, 0.7);\r\n}\r\n'],sourceRoot:""}]);const u=A},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var s={};if(r)for(var i=0;i<this.length;i++){var l=this[i][0];null!=l&&(s[l]=!0)}for(var c=0;c<n.length;c++){var A=[].concat(n[c]);r&&s[A[0]]||(void 0!==a&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=a),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),o&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=o):A[4]="".concat(o)),e.push(A))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},s=[],i=0;i<n.length;i++){var l=n[i],c=r.base?l[0]+r.base:l[0],A=a[c]||0,d="".concat(c," ").concat(A);a[c]=A+1;var u=t(d),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var f=o(p,r);r.byIndex=i,e.splice(i,0,{identifier:d,updater:f,references:1})}s.push(d)}return s}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var s=0;s<a.length;s++){var i=t(a[s]);e[i].references--}for(var l=r(n,o),c=0;c<a.length;c++){var A=t(a[c]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}a=l}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},498:(n,e,t)=>{n.exports=t.p+"5ea93bf78c46ef262e82.otf"}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.m=n,t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var r=e.getElementsByTagName("script");if(r.length)for(var o=r.length-1;o>-1&&!n;)n=r[o--].src}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{const n=(n,e,t,r)=>{let o=0;return{length:n,row:e,col:t,axis:r,hit:()=>{o+=1},isSunk:()=>n===o,getCells:()=>{const o=[];if("horizontal"===r)for(let r=t,a=0;a<n;r+=1,a+=1)o.push([e,r]);if("vertical"===r)for(let r=e,a=0;a<n;r+=1,a+=1)o.push([r,t]);return o}}},e=e=>{const t=(()=>{const e=[];let t=[];const r=(()=>{const n=[];for(let e=0;e<10;e+=1){const e=[];for(let n=0;n<10;n+=1)e[n]=null;n.push(e)}return n})(),o=n=>{for(const e of n.getCells()){const[t,o]=e;r[t][o]=n}(n=>{n.getCells().forEach((n=>{const[e,t]=n;for(let n=e-1;n<=e+1;n+=1)for(let e=t-1;e<=t+1;e+=1)n>=0&&n<=9&&e>=0&&e<=9&&null===r[n][e]&&(r[n][e]=0)}))})(n),t.push(n)},a=()=>{const n=[];for(let e=0;e<10;e+=1)for(let t=0;t<10;t+=1)0===r[e][t]&&n.push([e,t]);return n},s=()=>{const n=[];for(let e=0;e<10;e+=1)for(let t=0;t<10;t+=1)r[e][t]&&n.push([e,t]);return n},i=n=>{const e=n.getCells();for(let n=0;n<e.length;n+=1)if(a().some((t=>t[0]===e[n][0]&&t[1]===e[n][1]))||s().some((t=>t[0]===e[n][0]&&t[1]===e[n][1]))||e[n][0]>9||e[n][1]>9)return!1;return!0};return{getCells:()=>r,receiveAttack:(n,t)=>{e.push([n,t]);const o=r[n][t];o&&o.hit()},allShipsSunk:()=>t.every((n=>n.isSunk())),getAllMoves:()=>e,getTakenPositions:s,getShips:()=>t,randomizeShips:()=>{(()=>{for(let n=0;n<10;n+=1)for(let e=0;e<10;e+=1)r[n][e]=null;t=[]})();const e=[2,3,3,4,5];for(;e.length;){const t=e.pop();let r=Math.floor(10*Math.random()),a=Math.floor(10*Math.random());const s=Math.round(Math.random())?"vertical":"horizontal";let l=n(t,r,a,s);for(;!i(l);)r=Math.floor(10*Math.random()),a=Math.floor(10*Math.random()),l=n(t,r,a,s);o(l)}}}})();return{sendAttack:(n,e)=>{const[t,r]=e;n.receiveAttack(t,r)},getRandomMove:()=>[Math.floor(10*Math.random()),Math.floor(10*Math.random())],getBoard:()=>t,name:e}},r=(()=>{let n=e(),t=e(),r=n.getBoard(),a=t.getBoard();const s=()=>r.allShipsSunk()||a.allShipsSunk();return{getPlayer:()=>n,getEnemy:()=>t,isOver:s,playRound:(e,i)=>{let l=parseInt(e.dataset.row,10),c=parseInt(e.dataset.col,10);if(n.sendAttack(a,[l,c]),o.updateCellState(a,e),!a.getCells()[l][c]&&!s())do{let n;do{n=t.getRandomMove()}while(r.getAllMoves().some((e=>e[0]===n[0]&&e[1]===n[1])));t.sendAttack(r,n),[l,c]=n,e=i.querySelector(`.cell[data-row="${l}"][data-col="${c}"]`),o.updateCellState(r,e)}while(r.getCells()[l][c]&&!s());if(s()){const e=r.allShipsSunk()?t:n;o.updateMessage(`Game Over! Winner: ${e.name}`)}},initializeObjects:()=>{n=e("You"),t=e("Opponent"),r=n.getBoard(),a=t.getBoard(),r.randomizeShips(),a.randomizeShips()}}})(),o=(()=>{const n=document.querySelectorAll(".board"),e=document.getElementById("player-board"),t=document.getElementById("enemy-board"),o=document.getElementById("play-button"),a=document.getElementById("reset-button"),s=document.getElementById("random-button"),i=document.getElementById("message"),l=n=>{e.querySelectorAll(".ship").forEach((n=>n.classList.remove("ship")));for(const t of n.getShips()){if("horizontal"===t.axis)for(let n=t.col,r=0;r<t.length;n+=1,r+=1){const r=e.querySelector(`.cell[data-row="${t.row}"][data-col="${n}"]`);r.classList.add("ship"),r.setAttribute("data-size",t.length)}if("vertical"===t.axis)for(let n=t.row,r=0;r<t.length;n+=1,r+=1){const r=e.querySelector(`.cell[data-row="${n}"][data-col="${t.col}"]`);r.classList.add("ship"),r.setAttribute("data-size",t.length)}}},c=n=>{const t=n.target.closest(".cell");t&&(r.isOver()||t.classList.contains("hit")||t.classList.contains("miss")||r.playRound(t,e))},A=n=>{i.textContent=n};return o.addEventListener("click",(()=>{o.style.display="none",s.style.display="none",t.addEventListener("click",c),A("Make your move by clicking the opponent's board.")})),a.addEventListener("click",(()=>{document.querySelectorAll(".cell").forEach((n=>{n.classList.contains("hit")&&n.classList.remove("hit"),n.classList.contains("miss")&&n.classList.remove("miss")})),r.initializeObjects(),l(r.getPlayer().getBoard()),t.removeEventListener("click",c),o.style.display="block",s.style.display="block",A("Place Your Ships")})),s.addEventListener("click",(()=>{r.initializeObjects(),l(r.getPlayer().getBoard())})),{addBoardCells:()=>{n.forEach((n=>{for(let e=0;e<10;e+=1)for(let t=0;t<10;t+=1){const r=document.createElement("div");r.classList.add("cell"),r.setAttribute("data-row",e),r.setAttribute("data-col",t),n.appendChild(r)}}))},displayShips:l,updateCellState:(n,e)=>{n.getTakenPositions().some((n=>n[0]===parseInt(e.dataset.row,10)&&n[1]===parseInt(e.dataset.col,10)))?(e.classList.add("hit"),((n,e)=>{const t=parseInt(e.dataset.row,10),r=parseInt(e.dataset.col,10),o=e.parentElement;[...o.children].filter((n=>1===Math.abs(t-n.dataset.row)&&1===Math.abs(r-n.dataset.col))).forEach((n=>{n.classList.add("miss")})),n.getShips().filter((n=>n.isSunk())).forEach((e=>{e.getCells().forEach((e=>{const[t,r]=e;for(let e=t-1;e<=t+1;e+=1)for(let t=r-1;t<=r+1;t+=1)e>=0&&e<=9&&t>=0&&t<=9&&0===n.getCells()[e][t]&&o.querySelector(`.cell[data-row="${e}"][data-col="${t}"]`).classList.add("miss")}))}))})(n,e)):e.classList.add("miss")},updateMessage:A}})();var a=t(379),s=t.n(a),i=t(795),l=t.n(i),c=t(569),A=t.n(c),d=t(565),u=t.n(d),p=t(216),f=t.n(p),m=t(589),g=t.n(m),h=t(890),b={};b.styleTagTransform=g(),b.setAttributes=u(),b.insert=A().bind(null,"head"),b.domAPI=l(),b.insertStyleElement=f(),s()(h.Z,b),h.Z&&h.Z.locals&&h.Z.locals,o.addBoardCells(),r.initializeObjects(),o.displayShips(r.getPlayer().getBoard())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,