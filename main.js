(()=>{"use strict";var e={890:(e,n,r)=>{r.d(n,{Z:()=>s});var t=r(537),o=r.n(t),a=r(645),i=r.n(a)()(o());i.push([e.id,"* {\n  margin: 0;\n}\n\nbody {\n  min-height: 100vh;\n}\n\n.boards {\n  display: flex;\n  justify-content: center;\n  gap: 10rem;\n}\n\n.board-info {\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: auto 1fr;\n}\n\n.board {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  grid-template-rows: repeat(10, 1fr);\n  grid-row: 1 / 2;\n}\n\n.cell {\n  height: 2rem;\n  width: 2rem;\n  border: 1px solid black;\n}\n\n.player {\n  grid-row: 2 / 3;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.ship {\n  background-color: gray;\n}\n\n.ship.hit {\n  background-color: red;\n}\n\n.ship.miss {\n  background-color: aqua;\n}\n","",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA;EACE,SAAS;AACX;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,UAAU;AACZ;;AAEA;EACE,aAAa;EACb,0BAA0B;EAC1B,4BAA4B;AAC9B;;AAEA;EACE,aAAa;EACb,sCAAsC;EACtC,mCAAmC;EACnC,eAAe;AACjB;;AAEA;EACE,YAAY;EACZ,WAAW;EACX,uBAAuB;AACzB;;AAEA;EACE,eAAe;EACf,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,sBAAsB;AACxB",sourcesContent:["* {\r\n  margin: 0;\r\n}\r\n\r\nbody {\r\n  min-height: 100vh;\r\n}\r\n\r\n.boards {\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 10rem;\r\n}\r\n\r\n.board-info {\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  grid-template-rows: auto 1fr;\r\n}\r\n\r\n.board {\r\n  display: grid;\r\n  grid-template-columns: repeat(10, 1fr);\r\n  grid-template-rows: repeat(10, 1fr);\r\n  grid-row: 1 / 2;\r\n}\r\n\r\n.cell {\r\n  height: 2rem;\r\n  width: 2rem;\r\n  border: 1px solid black;\r\n}\r\n\r\n.player {\r\n  grid-row: 2 / 3;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.ship {\r\n  background-color: gray;\r\n}\r\n\r\n.ship.hit {\r\n  background-color: red;\r\n}\r\n\r\n.ship.miss {\r\n  background-color: aqua;\r\n}\r\n"],sourceRoot:""}]);const s=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var r="",t=void 0!==n[5];return n[4]&&(r+="@supports (".concat(n[4],") {")),n[2]&&(r+="@media ".concat(n[2]," {")),t&&(r+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),r+=e(n),t&&(r+="}"),n[2]&&(r+="}"),n[4]&&(r+="}"),r})).join("")},n.i=function(e,r,t,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(t)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);t&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),r&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=r):d[2]=r),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),n.push(d))}},n}},537:e=>{e.exports=function(e){var n=e[1],r=e[3];if(!r)return n;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),a="/*# ".concat(o," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function r(e){for(var r=-1,t=0;t<n.length;t++)if(n[t].identifier===e){r=t;break}return r}function t(e,t){for(var a={},i=[],s=0;s<e.length;s++){var c=e[s],l=t.base?c[0]+t.base:c[0],d=a[l]||0,u="".concat(l," ").concat(d);a[l]=d+1;var p=r(u),A={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)n[p].references++,n[p].updater(A);else{var f=o(A,t);t.byIndex=s,n.splice(s,0,{identifier:u,updater:f,references:1})}i.push(u)}return i}function o(e,n){var r=n.domAPI(n);return r.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;r.update(e=n)}else r.remove()}}e.exports=function(e,o){var a=t(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var s=r(a[i]);n[s].references--}for(var c=t(e,o),l=0;l<a.length;l++){var d=r(a[l]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}a=c}}},569:e=>{var n={};e.exports=function(e,r){var t=function(e){if(void 0===n[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}n[e]=r}return n[e]}(e);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(r)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,r)=>{e.exports=function(e){var n=r.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(r){!function(e,n,r){var t="";r.supports&&(t+="@supports (".concat(r.supports,") {")),r.media&&(t+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(t+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),t+=r.css,o&&(t+="}"),r.media&&(t+="}"),r.supports&&(t+="}");var a=r.sourceMap;a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(t,e,n.options)}(n,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function r(t){var o=n[t];if(void 0!==o)return o.exports;var a=n[t]={id:t,exports:{}};return e[t](a,a.exports,r),a.exports}r.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return r.d(n,{a:n}),n},r.d=(e,n)=>{for(var t in n)r.o(n,t)&&!r.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},r.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),r.nc=void 0,(()=>{const e=()=>{const e=(()=>{const e=[],n=[],r=[],t=(()=>{const e=[];for(let n=0;n<10;n+=1){const n=[];for(let e=0;e<10;e+=1)n[e]=null;e.push(n)}return e})();return{getCells:()=>t,placeShip:(e,n,o,a)=>{const i=(e=>{let n=0;return{length:e,hit:()=>{n+=1},getHits:()=>n,isSunk:()=>e===n}})(e);if("horizontal"===a)for(let r=o,a=0;a<e;r+=1,a+=1)t[n][r]=i;if("vertical"===a)for(let r=n,a=0;a<e;r+=1,a+=1)t[r][o]=i;r.push(i)},receiveAttack:(r,o)=>{n.push([r,o]);const a=t[r][o];a?a.hit():e.push([r,o]),console.log("DONE!")},getMissedAttacks:()=>e,allShipsSunk:()=>r.every((e=>e.isSunk())),getAllMoves:()=>n,getEmptyPositions:()=>{const e=[];for(let n=0;n<9;n+=1)for(let r=0;r<9;r+=1)null===t[n][r]&&e.push([n,r]);return e},getTakenPositions:()=>{const e=[];for(let n=0;n<9;n+=1)for(let r=0;r<9;r+=1)null!==t[n][r]&&e.push([n,r]);return e}}})();let n=!1;return{sendAttack:(e,n)=>{const[r,t]=n;e.receiveAttack(r,t)},getRandomMove:()=>[Math.floor(10*Math.random()),Math.floor(10*Math.random())],isTurn:()=>n,startTurn:()=>{n=!0},endTurn:()=>{n=!1},getBoard:()=>e}},n=(()=>{let n,r,o,a;return{startGame:()=>{n=e(),r=e(),o=n.getBoard(),a=r.getBoard(),o.placeShip(5,0,0,"horizontal"),o.placeShip(4,2,0,"horizontal"),o.placeShip(3,4,0,"horizontal"),o.placeShip(3,6,0,"horizontal"),o.placeShip(2,8,0,"horizontal"),a.placeShip(5,0,0,"horizontal"),a.placeShip(4,2,0,"horizontal"),a.placeShip(3,4,0,"horizontal"),a.placeShip(3,6,0,"horizontal"),a.placeShip(2,8,0,"horizontal"),t.displayShips(o)},getPlayer:()=>n,getEnemy:()=>r}})(),t=(()=>{const e=document.querySelectorAll(".board"),r=document.getElementById("player-board");return document.getElementById("enemy-board").addEventListener("click",(e=>{const r=e.target.closest(".cell");if(!r)return;const{row:t,col:o}=r.dataset,a=n.getPlayer(),i=n.getEnemy().getBoard();a.sendAttack(i,[t,o])})),{addBoardCells:()=>{e.forEach((e=>{for(let n=0;n<10;n+=1)for(let r=0;r<10;r+=1){const t=document.createElement("div");t.classList.add("cell"),t.setAttribute("data-row",n),t.setAttribute("data-col",r),e.appendChild(t)}}))},displayShips:e=>{for(const[n,t]of e.getTakenPositions())r.querySelector(`.cell[data-row="${n}"][data-col="${t}"]`).classList.add("ship")}}})();var o=r(379),a=r.n(o),i=r(795),s=r.n(i),c=r(569),l=r.n(c),d=r(565),u=r.n(d),p=r(216),A=r.n(p),f=r(589),h=r.n(f),m=r(890),g={};g.styleTagTransform=h(),g.setAttributes=u(),g.insert=l().bind(null,"head"),g.domAPI=s(),g.insertStyleElement=A(),a()(m.Z,g),m.Z&&m.Z.locals&&m.Z.locals,t.addBoardCells(),n.startGame()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,