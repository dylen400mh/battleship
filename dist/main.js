(()=>{"use strict";var e={890:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(537),o=n.n(r),a=n(645),s=n.n(a)()(o());s.push([e.id,"* {\n  margin: 0;\n}\n\nbody {\n  min-height: 100vh;\n}\n\n.title {\n  font-size: 4rem;\n  padding: 1rem 2rem;\n}\n\n.body {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 2rem;\n}\n\n.boards {\n  display: flex;\n  justify-content: center;\n  gap: 10rem;\n}\n\n.board-info {\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: auto 1fr;\n  gap: 0.5rem;\n}\n\n.board {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  grid-template-rows: repeat(10, 1fr);\n  grid-row: 1 / 2;\n}\n\n.cell {\n  height: 2rem;\n  width: 2rem;\n  border: 1px solid black;\n}\n\n.player {\n  grid-row: 2 / 3;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 1.3rem;\n}\n\n.ship {\n  background-color: gray;\n}\n\n.ship.dragged {\n  opacity: 0.5;\n}\n\n.hit {\n  background-color: red;\n}\n\n.miss {\n  background-color: aqua;\n}\n\n#message {\n  font-size: 1.75rem;\n}\n\n.buttons {\n  display: flex;\n  gap: 2rem;\n  justify-content: center;\n}\n\nbutton {\n  width: 8rem;\n  height: 4rem;\n  font-size: 1.5rem;\n}\n","",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA;EACE,SAAS;AACX;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,SAAS;AACX;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,UAAU;AACZ;;AAEA;EACE,aAAa;EACb,0BAA0B;EAC1B,4BAA4B;EAC5B,WAAW;AACb;;AAEA;EACE,aAAa;EACb,sCAAsC;EACtC,mCAAmC;EACnC,eAAe;AACjB;;AAEA;EACE,YAAY;EACZ,WAAW;EACX,uBAAuB;AACzB;;AAEA;EACE,eAAe;EACf,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,iBAAiB;AACnB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,SAAS;EACT,uBAAuB;AACzB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,iBAAiB;AACnB",sourcesContent:["* {\r\n  margin: 0;\r\n}\r\n\r\nbody {\r\n  min-height: 100vh;\r\n}\r\n\r\n.title {\r\n  font-size: 4rem;\r\n  padding: 1rem 2rem;\r\n}\r\n\r\n.body {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 2rem;\r\n}\r\n\r\n.boards {\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 10rem;\r\n}\r\n\r\n.board-info {\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  grid-template-rows: auto 1fr;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.board {\r\n  display: grid;\r\n  grid-template-columns: repeat(10, 1fr);\r\n  grid-template-rows: repeat(10, 1fr);\r\n  grid-row: 1 / 2;\r\n}\r\n\r\n.cell {\r\n  height: 2rem;\r\n  width: 2rem;\r\n  border: 1px solid black;\r\n}\r\n\r\n.player {\r\n  grid-row: 2 / 3;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 1.3rem;\r\n}\r\n\r\n.ship {\r\n  background-color: gray;\r\n}\r\n\r\n.ship.dragged {\r\n  opacity: 0.5;\r\n}\r\n\r\n.hit {\r\n  background-color: red;\r\n}\r\n\r\n.miss {\r\n  background-color: aqua;\r\n}\r\n\r\n#message {\r\n  font-size: 1.75rem;\r\n}\r\n\r\n.buttons {\r\n  display: flex;\r\n  gap: 2rem;\r\n  justify-content: center;\r\n}\r\n\r\nbutton {\r\n  width: 8rem;\r\n  height: 4rem;\r\n  font-size: 1.5rem;\r\n}\r\n"],sourceRoot:""}]);const i=s},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var i=0;i<this.length;i++){var l=this[i][0];null!=l&&(s[l]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);r&&s[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},s=[],i=0;i<e.length;i++){var l=e[i],c=r.base?l[0]+r.base:l[0],d=a[c]||0,A="".concat(c," ").concat(d);a[c]=d+1;var u=n(A),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)t[u].references++,t[u].updater(p);else{var f=o(p,r);r.byIndex=i,t.splice(i,0,{identifier:A,updater:f,references:1})}s.push(A)}return s}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var s=0;s<a.length;s++){var i=n(a[s]);t[i].references--}for(var l=r(e,o),c=0;c<a.length;c++){var d=n(a[c]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}a=l}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{const e=(e,t,n,r)=>{let o=0;return{length:e,row:t,col:n,axis:r,hit:()=>{o+=1},isSunk:()=>e===o,getCells:()=>{const o=[];if("horizontal"===r)for(let r=n,a=0;a<e;r+=1,a+=1)o.push([t,r]);if("vertical"===r)for(let r=t,a=0;a<e;r+=1,a+=1)o.push([r,n]);return o}}},t=t=>{const n=(()=>{const t=[];let n=[];const r=(()=>{const e=[];for(let t=0;t<10;t+=1){const t=[];for(let e=0;e<10;e+=1)t[e]=null;e.push(t)}return e})(),o=e=>{for(const t of e.getCells()){const[n,o]=t;r[n][o]=e}(e=>{e.getCells().forEach((e=>{const[t,n]=e;for(let e=t-1;e<=t+1;e+=1)for(let t=n-1;t<=n+1;t+=1)e>=0&&e<=9&&t>=0&&t<=9&&null===r[e][t]&&(r[e][t]=0)}))})(e),n.push(e)},a=()=>{const e=[];for(let t=0;t<10;t+=1)for(let n=0;n<10;n+=1)0===r[t][n]&&e.push([t,n]);return e},s=()=>{const e=[];for(let t=0;t<10;t+=1)for(let n=0;n<10;n+=1)r[t][n]&&e.push([t,n]);return e},i=e=>{const t=e.getCells();for(let e=0;e<t.length;e+=1)if(a().some((n=>n[0]===t[e][0]&&n[1]===t[e][1]))||s().some((n=>n[0]===t[e][0]&&n[1]===t[e][1]))||t[e][0]>9||t[e][1]>9)return!1;return!0};return{getCells:()=>r,receiveAttack:(e,n)=>{t.push([e,n]);const o=r[e][n];o&&o.hit()},allShipsSunk:()=>n.every((e=>e.isSunk())),getAllMoves:()=>t,getTakenPositions:s,getShips:()=>n,randomizeShips:()=>{(()=>{for(let e=0;e<10;e+=1)for(let t=0;t<10;t+=1)r[e][t]=null;n=[]})();const t=[2,3,3,4,5];for(;t.length;){const n=t.pop();let r=Math.floor(10*Math.random()),a=Math.floor(10*Math.random());const s=Math.round(Math.random())?"vertical":"horizontal";let l=e(n,r,a,s);for(;!i(l);)r=Math.floor(10*Math.random()),a=Math.floor(10*Math.random()),l=e(n,r,a,s);o(l)}}}})();return{sendAttack:(e,t)=>{const[n,r]=t;e.receiveAttack(n,r)},getRandomMove:()=>[Math.floor(10*Math.random()),Math.floor(10*Math.random())],getBoard:()=>n,name:t}},r=(()=>{let e=t(),n=t(),r=e.getBoard(),a=n.getBoard();const s=()=>r.allShipsSunk()||a.allShipsSunk();return{getPlayer:()=>e,getEnemy:()=>n,isOver:s,playRound:(t,i)=>{let l=parseInt(t.dataset.row,10),c=parseInt(t.dataset.col,10);if(e.sendAttack(a,[l,c]),o.updateCellState(a,t),!a.getCells()[l][c]&&!s())do{let e;do{e=n.getRandomMove()}while(r.getAllMoves().some((t=>t[0]===e[0]&&t[1]===e[1])));n.sendAttack(r,e),[l,c]=e,t=i.querySelector(`.cell[data-row="${l}"][data-col="${c}"]`),o.updateCellState(r,t)}while(r.getCells()[l][c]&&!s());if(s()){const t=r.allShipsSunk()?n:e;o.updateMessage(`Game Over! Winner: ${t.name}`)}},initializeObjects:()=>{e=t("You"),n=t("Opponent"),r=e.getBoard(),a=n.getBoard(),r.randomizeShips(),a.randomizeShips()}}})(),o=(()=>{const e=document.querySelectorAll(".board"),t=document.getElementById("player-board"),n=document.getElementById("enemy-board"),o=document.getElementById("play-button"),a=document.getElementById("reset-button"),s=document.getElementById("random-button"),i=document.getElementById("message"),l=e=>{t.querySelectorAll(".ship").forEach((e=>e.classList.remove("ship")));for(const n of e.getShips()){if("horizontal"===n.axis)for(let e=n.col,r=0;r<n.length;e+=1,r+=1){const r=t.querySelector(`.cell[data-row="${n.row}"][data-col="${e}"]`);r.classList.add("ship"),r.setAttribute("data-size",n.length)}if("vertical"===n.axis)for(let e=n.row,r=0;r<n.length;e+=1,r+=1){const r=t.querySelector(`.cell[data-row="${e}"][data-col="${n.col}"]`);r.classList.add("ship"),r.setAttribute("data-size",n.length)}}},c=e=>{const n=e.target.closest(".cell");n&&(r.isOver()||n.classList.contains("hit")||n.classList.contains("miss")||r.playRound(n,t))},d=e=>{i.textContent=e};return o.addEventListener("click",(()=>{o.style.display="none",s.style.display="none",n.addEventListener("click",c),d("Make your move by clicking the opponent's board.")})),a.addEventListener("click",(()=>{document.querySelectorAll(".cell").forEach((e=>{e.classList.contains("hit")&&e.classList.remove("hit"),e.classList.contains("miss")&&e.classList.remove("miss")})),r.initializeObjects(),l(r.getPlayer().getBoard()),n.removeEventListener("click",c),o.style.display="block",s.style.display="block",d("Place Your Ships")})),s.addEventListener("click",(()=>{r.initializeObjects(),l(r.getPlayer().getBoard())})),{addBoardCells:()=>{e.forEach((e=>{for(let t=0;t<10;t+=1)for(let n=0;n<10;n+=1){const r=document.createElement("div");r.classList.add("cell"),r.setAttribute("data-row",t),r.setAttribute("data-col",n),e.appendChild(r)}}))},displayShips:l,updateCellState:(e,t)=>{e.getTakenPositions().some((e=>e[0]===parseInt(t.dataset.row,10)&&e[1]===parseInt(t.dataset.col,10)))?(t.classList.add("hit"),((e,t)=>{const n=parseInt(t.dataset.row,10),r=parseInt(t.dataset.col,10),o=t.parentElement;[...o.children].filter((e=>1===Math.abs(n-e.dataset.row)&&1===Math.abs(r-e.dataset.col))).forEach((e=>{e.classList.add("miss")})),e.getShips().filter((e=>e.isSunk())).forEach((t=>{t.getCells().forEach((t=>{const[n,r]=t;for(let t=n-1;t<=n+1;t+=1)for(let n=r-1;n<=r+1;n+=1)t>=0&&t<=9&&n>=0&&n<=9&&0===e.getCells()[t][n]&&o.querySelector(`.cell[data-row="${t}"][data-col="${n}"]`).classList.add("miss")}))}))})(e,t)):t.classList.add("miss")},updateMessage:d}})();var a=n(379),s=n.n(a),i=n(795),l=n.n(i),c=n(569),d=n.n(c),A=n(565),u=n.n(A),p=n(216),f=n.n(p),m=n(589),h=n.n(m),g=n(890),y={};y.styleTagTransform=h(),y.setAttributes=u(),y.insert=d().bind(null,"head"),y.domAPI=l(),y.insertStyleElement=f(),s()(g.Z,y),g.Z&&g.Z.locals&&g.Z.locals,o.addBoardCells(),r.initializeObjects(),o.displayShips(r.getPlayer().getBoard())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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U0FBU0QsSUFDdkIsTUFBT2pCLEVBQUtDLEdBQU9nQixFQUNuQixJQUFLLElBQUl4SCxFQUFJdUcsRUFBTSxFQUFHdkcsR0FBS3VHLEVBQU0sRUFBR3ZHLEdBQUssRUFDdkMsSUFBSyxJQUFJK0csRUFBSVAsRUFBTSxFQUFHTyxHQUFLUCxFQUFNLEVBQUdPLEdBQUssRUFFckMvRyxHQUFLLEdBQ0xBLEdBQUssR0FDTCtHLEdBQUssR0FDTEEsR0FBSyxHQUNzQixJQUEzQkUsRUFBTUosV0FBVzdHLEdBQUcrRyxJQUVBeUUsRUFBT2pJLGNBQ3pCLG1CQUFtQnZELGlCQUFpQitHLE9BRzFCNkQsVUFBVUUsSUFBSSxPQUdoQyxHQUNBLEdBQ0YsRUFpQkFpQixDQUF1QjlFLEVBQU9PLElBQ3pCQSxFQUFLb0QsVUFBVUUsSUFBSSxPQUFPLEVBdUVqQ2IsZ0JBRUgsRUE5TVcsRyx5SENNUnpJLEVBQVUsQ0FBQyxFQUVmQSxFQUFRZ0Qsa0JBQW9CLElBQzVCaEQsRUFBUTBDLGNBQWdCLElBRWxCMUMsRUFBUTBCLE9BQVMsU0FBYyxLQUFNLFFBRTNDMUIsRUFBUWUsT0FBUyxJQUNqQmYsRUFBUStDLG1CQUFxQixJQUVoQixJQUFJLElBQVMvQyxHQUtKLEtBQVcsSUFBUXdLLFFBQVMsSUFBUUEsT0NyQjFELEVBQUlULGdCQUdKLEVBQUtyQixvQkFHTCxFQUFJUyxhQUFhLEVBQUtuQixZQUFZTixXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zdHlsZXMvc3R5bGUuY3NzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9TaGlwLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvUGxheWVyLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvR2FtZWJvYXJkLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvR2FtZS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL0RPTS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3N0eWxlcy9zdHlsZS5jc3M/ZmY5NCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAqIHtcclxuICBtYXJnaW46IDA7XHJcbn1cclxuXHJcbmJvZHkge1xyXG4gIG1pbi1oZWlnaHQ6IDEwMHZoO1xyXG59XHJcblxyXG4udGl0bGUge1xyXG4gIGZvbnQtc2l6ZTogNHJlbTtcclxuICBwYWRkaW5nOiAxcmVtIDJyZW07XHJcbn1cclxuXHJcbi5ib2R5IHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICBnYXA6IDJyZW07XHJcbn1cclxuXHJcbi5ib2FyZHMge1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgZ2FwOiAxMHJlbTtcclxufVxyXG5cclxuLmJvYXJkLWluZm8ge1xyXG4gIGRpc3BsYXk6IGdyaWQ7XHJcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnI7XHJcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiBhdXRvIDFmcjtcclxuICBnYXA6IDAuNXJlbTtcclxufVxyXG5cclxuLmJvYXJkIHtcclxuICBkaXNwbGF5OiBncmlkO1xyXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDEwLCAxZnIpO1xyXG4gIGdyaWQtdGVtcGxhdGUtcm93czogcmVwZWF0KDEwLCAxZnIpO1xyXG4gIGdyaWQtcm93OiAxIC8gMjtcclxufVxyXG5cclxuLmNlbGwge1xyXG4gIGhlaWdodDogMnJlbTtcclxuICB3aWR0aDogMnJlbTtcclxuICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcclxufVxyXG5cclxuLnBsYXllciB7XHJcbiAgZ3JpZC1yb3c6IDIgLyAzO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICBmb250LXNpemU6IDEuM3JlbTtcclxufVxyXG5cclxuLnNoaXAge1xyXG4gIGJhY2tncm91bmQtY29sb3I6IGdyYXk7XHJcbn1cclxuXHJcbi5zaGlwLmRyYWdnZWQge1xyXG4gIG9wYWNpdHk6IDAuNTtcclxufVxyXG5cclxuLmhpdCB7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogcmVkO1xyXG59XHJcblxyXG4ubWlzcyB7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogYXF1YTtcclxufVxyXG5cclxuI21lc3NhZ2Uge1xyXG4gIGZvbnQtc2l6ZTogMS43NXJlbTtcclxufVxyXG5cclxuLmJ1dHRvbnMge1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZ2FwOiAycmVtO1xyXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG59XHJcblxyXG5idXR0b24ge1xyXG4gIHdpZHRoOiA4cmVtO1xyXG4gIGhlaWdodDogNHJlbTtcclxuICBmb250LXNpemU6IDEuNXJlbTtcclxufVxyXG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsU0FBUztBQUNYOztBQUVBO0VBQ0UsaUJBQWlCO0FBQ25COztBQUVBO0VBQ0UsZUFBZTtFQUNmLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLGFBQWE7RUFDYixzQkFBc0I7RUFDdEIsbUJBQW1CO0VBQ25CLFNBQVM7QUFDWDs7QUFFQTtFQUNFLGFBQWE7RUFDYix1QkFBdUI7RUFDdkIsVUFBVTtBQUNaOztBQUVBO0VBQ0UsYUFBYTtFQUNiLDBCQUEwQjtFQUMxQiw0QkFBNEI7RUFDNUIsV0FBVztBQUNiOztBQUVBO0VBQ0UsYUFBYTtFQUNiLHNDQUFzQztFQUN0QyxtQ0FBbUM7RUFDbkMsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLFlBQVk7RUFDWixXQUFXO0VBQ1gsdUJBQXVCO0FBQ3pCOztBQUVBO0VBQ0UsZUFBZTtFQUNmLGFBQWE7RUFDYix1QkFBdUI7RUFDdkIsbUJBQW1CO0VBQ25CLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLFlBQVk7QUFDZDs7QUFFQTtFQUNFLHFCQUFxQjtBQUN2Qjs7QUFFQTtFQUNFLHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLGFBQWE7RUFDYixTQUFTO0VBQ1QsdUJBQXVCO0FBQ3pCOztBQUVBO0VBQ0UsV0FBVztFQUNYLFlBQVk7RUFDWixpQkFBaUI7QUFDbkJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiKiB7XFxyXFxuICBtYXJnaW46IDA7XFxyXFxufVxcclxcblxcclxcbmJvZHkge1xcclxcbiAgbWluLWhlaWdodDogMTAwdmg7XFxyXFxufVxcclxcblxcclxcbi50aXRsZSB7XFxyXFxuICBmb250LXNpemU6IDRyZW07XFxyXFxuICBwYWRkaW5nOiAxcmVtIDJyZW07XFxyXFxufVxcclxcblxcclxcbi5ib2R5IHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gIGdhcDogMnJlbTtcXHJcXG59XFxyXFxuXFxyXFxuLmJvYXJkcyB7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICBnYXA6IDEwcmVtO1xcclxcbn1cXHJcXG5cXHJcXG4uYm9hcmQtaW5mbyB7XFxyXFxuICBkaXNwbGF5OiBncmlkO1xcclxcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnI7XFxyXFxuICBncmlkLXRlbXBsYXRlLXJvd3M6IGF1dG8gMWZyO1xcclxcbiAgZ2FwOiAwLjVyZW07XFxyXFxufVxcclxcblxcclxcbi5ib2FyZCB7XFxyXFxuICBkaXNwbGF5OiBncmlkO1xcclxcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMTAsIDFmcik7XFxyXFxuICBncmlkLXRlbXBsYXRlLXJvd3M6IHJlcGVhdCgxMCwgMWZyKTtcXHJcXG4gIGdyaWQtcm93OiAxIC8gMjtcXHJcXG59XFxyXFxuXFxyXFxuLmNlbGwge1xcclxcbiAgaGVpZ2h0OiAycmVtO1xcclxcbiAgd2lkdGg6IDJyZW07XFxyXFxuICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcXHJcXG59XFxyXFxuXFxyXFxuLnBsYXllciB7XFxyXFxuICBncmlkLXJvdzogMiAvIDM7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgZm9udC1zaXplOiAxLjNyZW07XFxyXFxufVxcclxcblxcclxcbi5zaGlwIHtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IGdyYXk7XFxyXFxufVxcclxcblxcclxcbi5zaGlwLmRyYWdnZWQge1xcclxcbiAgb3BhY2l0eTogMC41O1xcclxcbn1cXHJcXG5cXHJcXG4uaGl0IHtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IHJlZDtcXHJcXG59XFxyXFxuXFxyXFxuLm1pc3Mge1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogYXF1YTtcXHJcXG59XFxyXFxuXFxyXFxuI21lc3NhZ2Uge1xcclxcbiAgZm9udC1zaXplOiAxLjc1cmVtO1xcclxcbn1cXHJcXG5cXHJcXG4uYnV0dG9ucyB7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgZ2FwOiAycmVtO1xcclxcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbmJ1dHRvbiB7XFxyXFxuICB3aWR0aDogOHJlbTtcXHJcXG4gIGhlaWdodDogNHJlbTtcXHJcXG4gIGZvbnQtc2l6ZTogMS41cmVtO1xcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB1cGRhdGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiY29uc3QgU2hpcCA9IChsZW5ndGgsIHJvdywgY29sLCBheGlzKSA9PiB7XHJcbiAgLy8gaGl0cyBzdGFydCBhdCAwXHJcbiAgbGV0IGhpdHMgPSAwO1xyXG5cclxuICAvLyBnZXQgdGhlIGNlbGxzIGEgc2hpcCBvY2N1cGllc1xyXG4gIGNvbnN0IGdldENlbGxzID0gKCkgPT4ge1xyXG4gICAgY29uc3QgY2VsbHMgPSBbXTtcclxuICAgIGlmIChheGlzID09PSBcImhvcml6b250YWxcIikge1xyXG4gICAgICBmb3IgKGxldCBpID0gY29sLCBqID0gMDsgaiA8IGxlbmd0aDsgaSArPSAxLCBqICs9IDEpIHtcclxuICAgICAgICBjZWxscy5wdXNoKFtyb3csIGldKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChheGlzID09PSBcInZlcnRpY2FsXCIpIHtcclxuICAgICAgZm9yIChsZXQgaSA9IHJvdywgaiA9IDA7IGogPCBsZW5ndGg7IGkgKz0gMSwgaiArPSAxKSB7XHJcbiAgICAgICAgY2VsbHMucHVzaChbaSwgY29sXSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY2VsbHM7XHJcbiAgfTtcclxuXHJcbiAgLy8gaW5jcmVtZW50cyBudW1iZXIgb2YgaGl0cyBvbiBhIHNoaXBcclxuICBjb25zdCBoaXQgPSAoKSA9PiB7XHJcbiAgICBoaXRzICs9IDE7XHJcbiAgfTtcclxuXHJcbiAgLy8gZGV0ZXJtaW5lcyBpZiBhIHNoaXAgaGFzIHN1bmtcclxuICBjb25zdCBpc1N1bmsgPSAoKSA9PiBsZW5ndGggPT09IGhpdHM7XHJcblxyXG4gIHJldHVybiB7IGxlbmd0aCwgcm93LCBjb2wsIGF4aXMsIGhpdCwgaXNTdW5rLCBnZXRDZWxscyB9O1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgU2hpcDtcclxuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tc2hhZG93ICovXHJcbmltcG9ydCBHYW1lYm9hcmQgZnJvbSBcIi4vR2FtZWJvYXJkXCI7XHJcblxyXG5jb25zdCBQbGF5ZXIgPSAobmFtZSkgPT4ge1xyXG4gIGNvbnN0IGJvYXJkID0gR2FtZWJvYXJkKCk7XHJcblxyXG4gIC8vIHNlbmRzIGFuIGF0dGFjayB0byBhIGJvYXJkL3Bvc2l0aW9uXHJcbiAgY29uc3Qgc2VuZEF0dGFjayA9IChib2FyZCwgY29vcmRzKSA9PiB7XHJcbiAgICBjb25zdCBbcm93LCBjb2xdID0gY29vcmRzO1xyXG5cclxuICAgIGJvYXJkLnJlY2VpdmVBdHRhY2socm93LCBjb2wpO1xyXG4gIH07XHJcblxyXG4gIC8vIGdlbmVyYXRlcyBhIHJhbmRvbSBtb3ZlIGZvciB0aGUgcGxheWVyXHJcbiAgY29uc3QgZ2V0UmFuZG9tTW92ZSA9ICgpID0+IHtcclxuICAgIGNvbnN0IHJvdyA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKTtcclxuICAgIGNvbnN0IGNvbCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKTtcclxuXHJcbiAgICByZXR1cm4gW3JvdywgY29sXTtcclxuICB9O1xyXG5cclxuICAvLyByZXR1cm5zIHRoZSBib2FyZCBvYmplY3Qgb2YgdGhlIHBsYXllclxyXG4gIGNvbnN0IGdldEJvYXJkID0gKCkgPT4gYm9hcmQ7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBzZW5kQXR0YWNrLFxyXG4gICAgZ2V0UmFuZG9tTW92ZSxcclxuICAgIGdldEJvYXJkLFxyXG4gICAgbmFtZSxcclxuICB9O1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgUGxheWVyO1xyXG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1yZXN0cmljdGVkLXN5bnRheCAqL1xyXG5pbXBvcnQgU2hpcCBmcm9tIFwiLi9TaGlwXCI7XHJcblxyXG5jb25zdCBHYW1lYm9hcmQgPSAoKSA9PiB7XHJcbiAgLy8ga2VlcCB0cmFjayBvZiB3aGVyZSBtb3ZlcyB3ZXJlIG1hZGVcclxuICBjb25zdCBtb3ZlcyA9IFtdO1xyXG5cclxuICAvLyBrZWVwcyB0cmFjayBvZiBzaGlwcyBvbiB0aGUgYm9hcmRcclxuICBsZXQgc2hpcHMgPSBbXTtcclxuXHJcbiAgLy8gQ3JlYXRlcyBib2FyZC4gU3BvdHMgdGhhdCBoYXZlIG5vIHNoaXBzIGlzIG5vdCBhIHN1cnJvdW5kaW5nIHBvc2l0aW9uIGFyZSBudWxsIGJ5IGRlZmF1bHQuXHJcbiAgY29uc3QgY3JlYXRlQm9hcmQgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBicmQgPSBbXTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTA7IGkgKz0gMSkge1xyXG4gICAgICBjb25zdCByb3cgPSBbXTtcclxuICAgICAgZm9yIChsZXQgY29sID0gMDsgY29sIDwgMTA7IGNvbCArPSAxKSB7XHJcbiAgICAgICAgcm93W2NvbF0gPSBudWxsO1xyXG4gICAgICB9XHJcbiAgICAgIGJyZC5wdXNoKHJvdyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGJyZDtcclxuICB9O1xyXG5cclxuICAvLyBjcmVhdGVzIGEgbmV3IGJvYXJkXHJcbiAgY29uc3QgYm9hcmQgPSBjcmVhdGVCb2FyZCgpO1xyXG5cclxuICAvLyBnZXQgY3VycmVudCBib2FyZCBjZWxsc1xyXG4gIGNvbnN0IGdldENlbGxzID0gKCkgPT4gYm9hcmQ7XHJcblxyXG4gIC8vIHNldCBzdXJyb3VuZGluZyBwb3NpdGlvbnMgb2Ygc2hpcCB0byBlcXVhbCAwXHJcbiAgY29uc3QgbWFya1N1cnJvdW5kaW5nUG9zaXRpb25zID0gKHNoaXApID0+IHtcclxuICAgIHNoaXAuZ2V0Q2VsbHMoKS5mb3JFYWNoKChjZWxsKSA9PiB7XHJcbiAgICAgIGNvbnN0IFtyb3csIGNvbF0gPSBjZWxsO1xyXG4gICAgICBmb3IgKGxldCBpID0gcm93IC0gMTsgaSA8PSByb3cgKyAxOyBpICs9IDEpIHtcclxuICAgICAgICBmb3IgKGxldCBqID0gY29sIC0gMTsgaiA8PSBjb2wgKyAxOyBqICs9IDEpIHtcclxuICAgICAgICAgIGlmIChpID49IDAgJiYgaSA8PSA5ICYmIGogPj0gMCAmJiBqIDw9IDkgJiYgYm9hcmRbaV1bal0gPT09IG51bGwpIHtcclxuICAgICAgICAgICAgYm9hcmRbaV1bal0gPSAwO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgLy8gUGxhY2VzIGEgc2hpcCBhdCBzcGVjaWZpZWQgY29vcmRpbmF0ZXMgYW5kIG9uIGEgc3BlY2lmaWVkIGF4aXNcclxuICBjb25zdCBwbGFjZVNoaXAgPSAoc2hpcCkgPT4ge1xyXG4gICAgZm9yIChjb25zdCBjZWxsIG9mIHNoaXAuZ2V0Q2VsbHMoKSkge1xyXG4gICAgICBjb25zdCBbcm93LCBjb2xdID0gY2VsbDtcclxuICAgICAgYm9hcmRbcm93XVtjb2xdID0gc2hpcDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBtYXJrIHN1cnJvdW5kaW5nIHBvc2l0aW9uc1xyXG4gICAgbWFya1N1cnJvdW5kaW5nUG9zaXRpb25zKHNoaXApO1xyXG5cclxuICAgIC8vIGFkZCBzaGlwIHRvIGFycmF5XHJcbiAgICBzaGlwcy5wdXNoKHNoaXApO1xyXG4gIH07XHJcblxyXG4gIC8vIHJlY2VpdmVzIGFuIGF0dGFjayBmcm9tIGEgcGxheWVyXHJcbiAgY29uc3QgcmVjZWl2ZUF0dGFjayA9IChyb3csIGNvbCkgPT4ge1xyXG4gICAgLy8gYWRkIG1vdmUgdG8gbW92ZXMgYXJyYXlcclxuICAgIG1vdmVzLnB1c2goW3JvdywgY29sXSk7XHJcblxyXG4gICAgY29uc3QgcG9zaXRpb24gPSBib2FyZFtyb3ddW2NvbF07XHJcblxyXG4gICAgLy8gaWYgYSBzaGlwIGV4aXN0cyBhdCB0aGUgcG9zaXRpb24sIGhpdCBpdFxyXG4gICAgaWYgKHBvc2l0aW9uKSB7XHJcbiAgICAgIHBvc2l0aW9uLmhpdCgpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8vIGdldCBhbGwgbW92ZXMgbWFkZSBvbiB0aGUgYm9hcmRcclxuICBjb25zdCBnZXRBbGxNb3ZlcyA9ICgpID0+IG1vdmVzO1xyXG5cclxuICAvLyByZXR1cm5zIHdoZXRoZXIgYWxsIHRoZSBib2FyZCdzIHNoaXBzIGFyZSBzdW5rXHJcbiAgY29uc3QgYWxsU2hpcHNTdW5rID0gKCkgPT4gc2hpcHMuZXZlcnkoKHNoaXApID0+IHNoaXAuaXNTdW5rKCkpO1xyXG5cclxuICAvLyBHZXQgYWxsIHN1cnJvdW5kaW5nIHBvc2l0aW9ucyBvbiB0aGUgYm9hcmQuIFN1cnJvdW5kaW5nIHBvc2l0aW9ucyBoYXZlIGEgdmFsdWUgb2YgMFxyXG4gIGNvbnN0IGdldFN1cnJvdW5kaW5nUG9zaXRpb25zID0gKCkgPT4ge1xyXG4gICAgY29uc3Qgc3Vycm91bmRpbmdQb3NpdGlvbnMgPSBbXTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTA7IGkgKz0gMSkge1xyXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDEwOyBqICs9IDEpIHtcclxuICAgICAgICBpZiAoYm9hcmRbaV1bal0gPT09IDApIHN1cnJvdW5kaW5nUG9zaXRpb25zLnB1c2goW2ksIGpdKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHN1cnJvdW5kaW5nUG9zaXRpb25zO1xyXG4gIH07XHJcblxyXG4gIC8vIGdldCBwb3NpdGlvbnMgdGhhdCBoYXZlIGEgc2hpcCBvYmplY3Qgb24gdGhlbVxyXG4gIGNvbnN0IGdldFRha2VuUG9zaXRpb25zID0gKCkgPT4ge1xyXG4gICAgY29uc3QgdGFrZW5Qb3NpdGlvbnMgPSBbXTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTA7IGkgKz0gMSkge1xyXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDEwOyBqICs9IDEpIHtcclxuICAgICAgICBpZiAoYm9hcmRbaV1bal0pIHRha2VuUG9zaXRpb25zLnB1c2goW2ksIGpdKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRha2VuUG9zaXRpb25zO1xyXG4gIH07XHJcblxyXG4gIC8vIGdldCBhbGwgc2hpcHMgb24gYSBib2FyZFxyXG4gIGNvbnN0IGdldFNoaXBzID0gKCkgPT4gc2hpcHM7XHJcblxyXG4gIC8qIENoZWNrOlxyXG4gIDEuIFNoaXBzIGRvbid0IG92ZXJsYXBcclxuICAyLiBTaGlwcyBzdGF5IG9uIGJvYXJkXHJcbiAgMy4gQXQgbGVhc3Qgb25lIHNwYWNlIGJldHdlZW4gYWxsIHNoaXBzXHJcbiAgKi9cclxuXHJcbiAgY29uc3QgaXNWYWxpZFBsYWNlbWVudCA9IChzaGlwKSA9PiB7XHJcbiAgICBjb25zdCBjZWxscyA9IHNoaXAuZ2V0Q2VsbHMoKTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNlbGxzLmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICAgIGlmIChcclxuICAgICAgICBnZXRTdXJyb3VuZGluZ1Bvc2l0aW9ucygpLnNvbWUoXHJcbiAgICAgICAgICAocG9zaXRpb24pID0+XHJcbiAgICAgICAgICAgIHBvc2l0aW9uWzBdID09PSBjZWxsc1tpXVswXSAmJiBwb3NpdGlvblsxXSA9PT0gY2VsbHNbaV1bMV1cclxuICAgICAgICApIHx8XHJcbiAgICAgICAgZ2V0VGFrZW5Qb3NpdGlvbnMoKS5zb21lKFxyXG4gICAgICAgICAgKHBvc2l0aW9uKSA9PlxyXG4gICAgICAgICAgICBwb3NpdGlvblswXSA9PT0gY2VsbHNbaV1bMF0gJiYgcG9zaXRpb25bMV0gPT09IGNlbGxzW2ldWzFdXHJcbiAgICAgICAgKSB8fFxyXG4gICAgICAgIGNlbGxzW2ldWzBdID4gOSB8fFxyXG4gICAgICAgIGNlbGxzW2ldWzFdID4gOVxyXG4gICAgICApXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH07XHJcblxyXG4gIC8vIHJlc2V0IGVhY2ggYm9hcmQgcG9zaXRpb24gdG8gbnVsbCBhbmQgcmVzZXQgc2hpcHMgYXJyYXlcclxuICBjb25zdCByZW1vdmVTaGlwcyA9ICgpID0+IHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTA7IGkgKz0gMSkge1xyXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDEwOyBqICs9IDEpIHtcclxuICAgICAgICBib2FyZFtpXVtqXSA9IG51bGw7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzaGlwcyA9IFtdO1xyXG4gIH07XHJcblxyXG4gIC8vIHJhbmRvbWl6ZSBzaGlwIHBsYWNlbWVudCBvbiBib2FyZFxyXG4gIGNvbnN0IHJhbmRvbWl6ZVNoaXBzID0gKCkgPT4ge1xyXG4gICAgLy8gaWYgdGhlcmUgYXJlIHNoaXBzIG9uIHRoZSBib2FyZCwgcmVtb3ZlIHRoZW1cclxuICAgIHJlbW92ZVNoaXBzKCk7XHJcblxyXG4gICAgY29uc3Qgc2hpcExlbmd0aHMgPSBbMiwgMywgMywgNCwgNV07XHJcblxyXG4gICAgLy8gd2hpbGUgdGhlcmUgYXJlIHNoaXBzIGxlZnQgdG8gcGxhY2VcclxuICAgIHdoaWxlIChzaGlwTGVuZ3Rocy5sZW5ndGgpIHtcclxuICAgICAgY29uc3QgbGVuZ3RoID0gc2hpcExlbmd0aHMucG9wKCk7XHJcblxyXG4gICAgICBsZXQgcm93ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApO1xyXG4gICAgICBsZXQgY29sID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApO1xyXG5cclxuICAgICAgLy8gSWYgMTogVmVydGljYWwuIElmIDA6IEhvcml6b250YWxcclxuICAgICAgY29uc3QgYXhpcyA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSkgPyBcInZlcnRpY2FsXCIgOiBcImhvcml6b250YWxcIjtcclxuXHJcbiAgICAgIC8vIGNyZWF0ZSBhIG5ldyBzaGlwXHJcbiAgICAgIGxldCBzaGlwID0gU2hpcChsZW5ndGgsIHJvdywgY29sLCBheGlzKTtcclxuXHJcbiAgICAgIC8vIHdoaWxlIHNoaXAgcGxhY2VtZW50IGlzbid0IHZhbGlkIGNoYW5nZSBpdHMgcG9zaXRpb25cclxuICAgICAgd2hpbGUgKCFpc1ZhbGlkUGxhY2VtZW50KHNoaXApKSB7XHJcbiAgICAgICAgcm93ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApO1xyXG4gICAgICAgIGNvbCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKTtcclxuICAgICAgICBzaGlwID0gU2hpcChsZW5ndGgsIHJvdywgY29sLCBheGlzKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gcGxhY2Ugc2hpcFxyXG4gICAgICBwbGFjZVNoaXAoc2hpcCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGdldENlbGxzLFxyXG4gICAgcmVjZWl2ZUF0dGFjayxcclxuICAgIGFsbFNoaXBzU3VuayxcclxuICAgIGdldEFsbE1vdmVzLFxyXG4gICAgZ2V0VGFrZW5Qb3NpdGlvbnMsXHJcbiAgICBnZXRTaGlwcyxcclxuICAgIHJhbmRvbWl6ZVNoaXBzLFxyXG4gIH07XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBHYW1lYm9hcmQ7XHJcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXHJcbi8qIGVzbGludC1kaXNhYmxlIG5vLWxvb3AtZnVuYyAqL1xyXG4vKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvbm8tY3ljbGUgKi9cclxuaW1wb3J0IFBsYXllciBmcm9tIFwiLi9QbGF5ZXJcIjtcclxuaW1wb3J0IERPTSBmcm9tIFwiLi9ET01cIjtcclxuXHJcbmNvbnN0IEdhbWUgPSAoKCkgPT4ge1xyXG4gIC8vIGNyZWF0ZSBvYmplY3RzXHJcbiAgbGV0IHBsYXllciA9IFBsYXllcigpO1xyXG4gIGxldCBlbmVteSA9IFBsYXllcigpO1xyXG5cclxuICAvLyBjcmVhdGUgcmVmZXJlbmNlcyB0byBnYW1lYm9hcmRzXHJcbiAgbGV0IHBsYXllckJvYXJkID0gcGxheWVyLmdldEJvYXJkKCk7XHJcbiAgbGV0IGVuZW15Qm9hcmQgPSBlbmVteS5nZXRCb2FyZCgpO1xyXG5cclxuICAvLyByZXR1cm5zIHBsYXllciBvYmplY3RcclxuICBjb25zdCBnZXRQbGF5ZXIgPSAoKSA9PiBwbGF5ZXI7XHJcblxyXG4gIC8vIHJldHVybnMgZW5lbXkgb2JqZWN0XHJcbiAgY29uc3QgZ2V0RW5lbXkgPSAoKSA9PiBlbmVteTtcclxuXHJcbiAgLy8gZGV0ZXJtaW5lcyBpZiBnYW1lIGlzIG92ZXJcclxuICBjb25zdCBpc092ZXIgPSAoKSA9PiBwbGF5ZXJCb2FyZC5hbGxTaGlwc1N1bmsoKSB8fCBlbmVteUJvYXJkLmFsbFNoaXBzU3VuaygpO1xyXG5cclxuICAvLyByZXR1cm5zIHdpbm5lclxyXG4gIGNvbnN0IGdldFdpbm5lciA9ICgpID0+IChwbGF5ZXJCb2FyZC5hbGxTaGlwc1N1bmsoKSA/IGVuZW15IDogcGxheWVyKTtcclxuXHJcbiAgLy8gUGxheXMgYSByb3VuZDogQSByb3VuZCBjb25zaXN0cyBvZiBib3RoIHBsYXllcnMgdGFraW5nIGF0IGxlYXN0IG9uZSB0dXJuLlxyXG4gIGNvbnN0IHBsYXlSb3VuZCA9IChjZWxsLCBwbGF5ZXJCb2FyZENvbnRhaW5lcikgPT4ge1xyXG4gICAgbGV0IHJvdyA9IHBhcnNlSW50KGNlbGwuZGF0YXNldC5yb3csIDEwKTtcclxuICAgIGxldCBjb2wgPSBwYXJzZUludChjZWxsLmRhdGFzZXQuY29sLCAxMCk7XHJcblxyXG4gICAgLy8gcGxheWVyIG1ha2VzIG1vdmVcclxuICAgIHBsYXllci5zZW5kQXR0YWNrKGVuZW15Qm9hcmQsIFtyb3csIGNvbF0pO1xyXG5cclxuICAgIC8vIHZpc3VhbGx5IHVwZGF0ZSBjZWxsIHRoYXQgd2FzIGNsaWNrZWRcclxuICAgIERPTS51cGRhdGVDZWxsU3RhdGUoZW5lbXlCb2FyZCwgY2VsbCk7XHJcblxyXG4gICAgLy8gaWYgdGhlIGF0dGFjayBtaXNzZWQgYW5kIHRoZSBnYW1lIGlzIG5vdCBvdmVyLCBzd2l0Y2ggdHVybnNcclxuICAgIGlmICghZW5lbXlCb2FyZC5nZXRDZWxscygpW3Jvd11bY29sXSAmJiAhaXNPdmVyKCkpIHtcclxuICAgICAgLy8gZW5lbXkgdGFrZXMgc2hvdHMgdW50aWwgdGhleSBtaXNzIG9yIHRoZSBnYW1lIGVuZHNcclxuICAgICAgZG8ge1xyXG4gICAgICAgIC8vIHdoaWxlIHRoZXJlIGlzIG5vdCBhIG5ldyBtb3ZlIGdlbmVyYXRlZCwgZ2VuZXJhdGUgYSBuZXcgbW92ZVxyXG4gICAgICAgIGxldCByYW5kb21Qb3NpdGlvbjtcclxuICAgICAgICBkbyB7XHJcbiAgICAgICAgICAvLyBnZXQgcmFuZG9tIHBvc2l0aW9uIGZvciBlbmVteSBtb3ZlXHJcbiAgICAgICAgICByYW5kb21Qb3NpdGlvbiA9IGVuZW15LmdldFJhbmRvbU1vdmUoKTtcclxuICAgICAgICB9IHdoaWxlIChcclxuICAgICAgICAgIHBsYXllckJvYXJkXHJcbiAgICAgICAgICAgIC5nZXRBbGxNb3ZlcygpXHJcbiAgICAgICAgICAgIC5zb21lKFxyXG4gICAgICAgICAgICAgIChwb3NpdGlvbikgPT5cclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uWzBdID09PSByYW5kb21Qb3NpdGlvblswXSAmJlxyXG4gICAgICAgICAgICAgICAgcG9zaXRpb25bMV0gPT09IHJhbmRvbVBvc2l0aW9uWzFdXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyBlbmVteSBzZW5kcyBhdHRhY2sgdG8gcGxheWVyIGJvYXJkXHJcbiAgICAgICAgZW5lbXkuc2VuZEF0dGFjayhwbGF5ZXJCb2FyZCwgcmFuZG9tUG9zaXRpb24pO1xyXG5cclxuICAgICAgICBbcm93LCBjb2xdID0gcmFuZG9tUG9zaXRpb247XHJcblxyXG4gICAgICAgIC8vIHVwZGF0ZSBwbGF5ZXIgYm9hcmQgYWZ0ZXIgZW5lbXkncyB0dXJuIGlmIHRoZXkgaGl0IGEgc2hvdCBhbmQgdGhlIGdhbWUgaXMgbm90IG92ZXJcclxuICAgICAgICBjZWxsID0gcGxheWVyQm9hcmRDb250YWluZXIucXVlcnlTZWxlY3RvcihcclxuICAgICAgICAgIGAuY2VsbFtkYXRhLXJvdz1cIiR7cm93fVwiXVtkYXRhLWNvbD1cIiR7Y29sfVwiXWBcclxuICAgICAgICApO1xyXG4gICAgICAgIERPTS51cGRhdGVDZWxsU3RhdGUocGxheWVyQm9hcmQsIGNlbGwpO1xyXG4gICAgICB9IHdoaWxlIChwbGF5ZXJCb2FyZC5nZXRDZWxscygpW3Jvd11bY29sXSAmJiAhaXNPdmVyKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIElmIHRoZSBnYW1lIGlzIG92ZXIsIHVwZGF0ZSB0aGUgbWVzc2FnZSBhY2NvcmRpbmdseS5cclxuICAgIGlmIChpc092ZXIoKSkge1xyXG4gICAgICBjb25zdCB3aW5uZXIgPSBnZXRXaW5uZXIoKTtcclxuICAgICAgRE9NLnVwZGF0ZU1lc3NhZ2UoYEdhbWUgT3ZlciEgV2lubmVyOiAke3dpbm5lci5uYW1lfWApO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8vIGluaXRpYWxpemUgb2JqZWN0cyBmb3IgbmV3IGdhbWVcclxuICBjb25zdCBpbml0aWFsaXplT2JqZWN0cyA9ICgpID0+IHtcclxuICAgIC8vIGNyZWF0ZSBuZXcgb2JqZWN0c1xyXG4gICAgcGxheWVyID0gUGxheWVyKFwiWW91XCIpO1xyXG4gICAgZW5lbXkgPSBQbGF5ZXIoXCJPcHBvbmVudFwiKTtcclxuICAgIHBsYXllckJvYXJkID0gcGxheWVyLmdldEJvYXJkKCk7XHJcbiAgICBlbmVteUJvYXJkID0gZW5lbXkuZ2V0Qm9hcmQoKTtcclxuXHJcbiAgICAvLyByYW5kb21seSBhZGQgc2hpcHMgdG8gZWFjaCBib2FyZFxyXG4gICAgcGxheWVyQm9hcmQucmFuZG9taXplU2hpcHMoKTtcclxuICAgIGVuZW15Qm9hcmQucmFuZG9taXplU2hpcHMoKTtcclxuICB9O1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgZ2V0UGxheWVyLFxyXG4gICAgZ2V0RW5lbXksXHJcbiAgICBpc092ZXIsXHJcbiAgICBwbGF5Um91bmQsXHJcbiAgICBpbml0aWFsaXplT2JqZWN0cyxcclxuICB9O1xyXG59KSgpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgR2FtZTtcclxuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1zeW50YXggKi9cclxuLyogZXNsaW50LWRpc2FibGUgbm8tc2hhZG93ICovXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tY3ljbGVcclxuaW1wb3J0IEdhbWUgZnJvbSBcIi4vR2FtZVwiO1xyXG5cclxuY29uc3QgRE9NID0gKCgpID0+IHtcclxuICAvLyBodG1sIGVsZW1lbnRzXHJcbiAgY29uc3QgYm9hcmRDb250YWluZXJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5ib2FyZFwiKTtcclxuICBjb25zdCBwbGF5ZXJCb2FyZENvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGxheWVyLWJvYXJkXCIpO1xyXG4gIGNvbnN0IGVuZW15Qm9hcmRDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImVuZW15LWJvYXJkXCIpO1xyXG4gIGNvbnN0IHBsYXlCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBsYXktYnV0dG9uXCIpO1xyXG4gIGNvbnN0IHJlc2V0QnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZXNldC1idXR0b25cIik7XHJcbiAgY29uc3QgcmFuZG9tQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyYW5kb20tYnV0dG9uXCIpO1xyXG4gIGNvbnN0IG1lc3NhZ2VDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1lc3NhZ2VcIik7XHJcblxyXG4gIC8vIGR5bmFtaWNhbGx5IGFkZHMgYm9hcmQgY2VsbHMgd2l0aCBkYXRhIGF0dHJpYnV0ZXMgcmVmZXJlbmNpbmcgcm93IGFuZCBjb2x1bW4gcG9zaXRpb25zXHJcbiAgY29uc3QgYWRkQm9hcmRDZWxscyA9ICgpID0+IHtcclxuICAgIGJvYXJkQ29udGFpbmVycy5mb3JFYWNoKChib2FyZCkgPT4ge1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpICs9IDEpIHtcclxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDEwOyBqICs9IDEpIHtcclxuICAgICAgICAgIGNvbnN0IGNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKFwiY2VsbFwiKTtcclxuICAgICAgICAgIGNlbGwuc2V0QXR0cmlidXRlKFwiZGF0YS1yb3dcIiwgaSk7XHJcbiAgICAgICAgICBjZWxsLnNldEF0dHJpYnV0ZShcImRhdGEtY29sXCIsIGopO1xyXG4gICAgICAgICAgYm9hcmQuYXBwZW5kQ2hpbGQoY2VsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICAvLyBjbGVhciBleGlzdGluZyBzaGlwcyBmcm9tIHBsYXllciBib2FyZCBkaXNwbGF5XHJcbiAgY29uc3QgY2xlYXJTaGlwcyA9ICgpID0+IHtcclxuICAgIGNvbnN0IGNlbGxzID0gcGxheWVyQm9hcmRDb250YWluZXIucXVlcnlTZWxlY3RvckFsbChcIi5zaGlwXCIpO1xyXG4gICAgY2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4gY2VsbC5jbGFzc0xpc3QucmVtb3ZlKFwic2hpcFwiKSk7XHJcbiAgfTtcclxuXHJcbiAgLy8gZnVuY3Rpb24gdXNlZCB0byBkaXNwbGF5IHBsYXllciBzaGlwc1xyXG4gIGNvbnN0IGRpc3BsYXlTaGlwcyA9IChib2FyZCkgPT4ge1xyXG4gICAgLy8gY2xlYXIgZXhpc3Rpbmcgc2hpcHNcclxuICAgIGNsZWFyU2hpcHMoKTtcclxuXHJcbiAgICAvLyBmb3IgZWFjaCBzaGlwIG9uIHRoZSBib2FyZCBhZGQgdGhlIHNoaXAgY2xhc3MgYW5kIGEgZGF0YSBhdHRyaWJ1dGUgZm9yIHNpemVcclxuICAgIGZvciAoY29uc3Qgc2hpcCBvZiBib2FyZC5nZXRTaGlwcygpKSB7XHJcbiAgICAgIGlmIChzaGlwLmF4aXMgPT09IFwiaG9yaXpvbnRhbFwiKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IHNoaXAuY29sLCBqID0gMDsgaiA8IHNoaXAubGVuZ3RoOyBpICs9IDEsIGogKz0gMSkge1xyXG4gICAgICAgICAgY29uc3QgdGFyZ2V0Q2VsbCA9IHBsYXllckJvYXJkQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgICAgICAgIGAuY2VsbFtkYXRhLXJvdz1cIiR7c2hpcC5yb3d9XCJdW2RhdGEtY29sPVwiJHtpfVwiXWBcclxuICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgdGFyZ2V0Q2VsbC5jbGFzc0xpc3QuYWRkKFwic2hpcFwiKTtcclxuICAgICAgICAgIHRhcmdldENlbGwuc2V0QXR0cmlidXRlKFwiZGF0YS1zaXplXCIsIHNoaXAubGVuZ3RoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChzaGlwLmF4aXMgPT09IFwidmVydGljYWxcIikge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSBzaGlwLnJvdywgaiA9IDA7IGogPCBzaGlwLmxlbmd0aDsgaSArPSAxLCBqICs9IDEpIHtcclxuICAgICAgICAgIGNvbnN0IHRhcmdldENlbGwgPSBwbGF5ZXJCb2FyZENvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgICAgICBgLmNlbGxbZGF0YS1yb3c9XCIke2l9XCJdW2RhdGEtY29sPVwiJHtzaGlwLmNvbH1cIl1gXHJcbiAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgIHRhcmdldENlbGwuY2xhc3NMaXN0LmFkZChcInNoaXBcIik7XHJcbiAgICAgICAgICB0YXJnZXRDZWxsLnNldEF0dHJpYnV0ZShcImRhdGEtc2l6ZVwiLCBzaGlwLmxlbmd0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLy8gcmVtb3ZlcyBoaXQgYW5kIG1pc3MgbWFya2VycyBmcm9tIGJvYXJkXHJcbiAgY29uc3QgcmVzZXRCb2FyZFN0YXRlID0gKCkgPT4ge1xyXG4gICAgY29uc3QgY2VsbENvbnRhaW5lcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmNlbGxcIik7XHJcblxyXG4gICAgY2VsbENvbnRhaW5lcnMuZm9yRWFjaCgoY2VsbCkgPT4ge1xyXG4gICAgICBpZiAoY2VsbC5jbGFzc0xpc3QuY29udGFpbnMoXCJoaXRcIikpIGNlbGwuY2xhc3NMaXN0LnJlbW92ZShcImhpdFwiKTtcclxuICAgICAgaWYgKGNlbGwuY2xhc3NMaXN0LmNvbnRhaW5zKFwibWlzc1wiKSkgY2VsbC5jbGFzc0xpc3QucmVtb3ZlKFwibWlzc1wiKTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIC8vIHJldmVhbHMgc3Vycm91bmRpbmcgY2VsbHMgb2YgYSBzaGlwIHRoYXQgaGFzIGJlZW4gaGl0XHJcbiAgY29uc3QgcmV2ZWFsU3Vycm91bmRpbmdDZWxscyA9IChib2FyZCwgY2VsbCkgPT4ge1xyXG4gICAgY29uc3Qgcm93ID0gcGFyc2VJbnQoY2VsbC5kYXRhc2V0LnJvdywgMTApO1xyXG4gICAgY29uc3QgY29sID0gcGFyc2VJbnQoY2VsbC5kYXRhc2V0LmNvbCwgMTApO1xyXG5cclxuICAgIGNvbnN0IHBhcmVudCA9IGNlbGwucGFyZW50RWxlbWVudDtcclxuXHJcbiAgICAvLyBnZXQgc3Vycm91bmRpbmcgY29ybmVyIGNlbGxzXHJcbiAgICBjb25zdCBzdXJyb3VuZGluZ0Nvcm5lcnMgPSBbLi4ucGFyZW50LmNoaWxkcmVuXS5maWx0ZXIoXHJcbiAgICAgIChzaWJsaW5nKSA9PlxyXG4gICAgICAgIE1hdGguYWJzKHJvdyAtIHNpYmxpbmcuZGF0YXNldC5yb3cpID09PSAxICYmXHJcbiAgICAgICAgTWF0aC5hYnMoY29sIC0gc2libGluZy5kYXRhc2V0LmNvbCkgPT09IDFcclxuICAgICk7XHJcblxyXG4gICAgLy8gUmV2ZWFsIGVhY2ggY29ybmVyXHJcbiAgICBzdXJyb3VuZGluZ0Nvcm5lcnMuZm9yRWFjaCgoY29ybmVyKSA9PiB7XHJcbiAgICAgIGNvcm5lci5jbGFzc0xpc3QuYWRkKFwibWlzc1wiKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIElmIHNoaXAgaXMgc3VuaywgcmV2ZWFsIHJlbWFpbmluZyBzaWRlc1xyXG4gICAgY29uc3Qgc3Vua1NoaXBzID0gYm9hcmQuZ2V0U2hpcHMoKS5maWx0ZXIoKHNoaXApID0+IHNoaXAuaXNTdW5rKCkpO1xyXG5cclxuICAgIHN1bmtTaGlwcy5mb3JFYWNoKChzaGlwKSA9PiB7XHJcbiAgICAgIHNoaXAuZ2V0Q2VsbHMoKS5mb3JFYWNoKChjZWxsKSA9PiB7XHJcbiAgICAgICAgY29uc3QgW3JvdywgY29sXSA9IGNlbGw7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IHJvdyAtIDE7IGkgPD0gcm93ICsgMTsgaSArPSAxKSB7XHJcbiAgICAgICAgICBmb3IgKGxldCBqID0gY29sIC0gMTsgaiA8PSBjb2wgKyAxOyBqICs9IDEpIHtcclxuICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgIGkgPj0gMCAmJlxyXG4gICAgICAgICAgICAgIGkgPD0gOSAmJlxyXG4gICAgICAgICAgICAgIGogPj0gMCAmJlxyXG4gICAgICAgICAgICAgIGogPD0gOSAmJlxyXG4gICAgICAgICAgICAgIGJvYXJkLmdldENlbGxzKClbaV1bal0gPT09IDBcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgY29uc3QgY2VsbEVsZW1lbnQgPSBwYXJlbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgICAgICAgICAgIGAuY2VsbFtkYXRhLXJvdz1cIiR7aX1cIl1bZGF0YS1jb2w9XCIke2p9XCJdYFxyXG4gICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAgIGNlbGxFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJtaXNzXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIC8vIHVwZGF0ZSBjZWxsIHN0YXRlcyBvZiBib2FyZCBkaXNwbGF5IGFmdGVyIGVhY2ggbW92ZVxyXG4gIGNvbnN0IHVwZGF0ZUNlbGxTdGF0ZSA9IChib2FyZCwgY2VsbCkgPT4ge1xyXG4gICAgLy8gaWYgdGhlIGNlbGwgaXMgdGFrZW4gYW5kIGl0cyBub3QgYSBzdXJyb3VuZGluZyBwb3NpdGlvbiwgY3JlYXRlIGEgdmFyaWFibGUgZm9yIGl0XHJcbiAgICBjb25zdCB0YWtlbkNlbGwgPSBib2FyZFxyXG4gICAgICAuZ2V0VGFrZW5Qb3NpdGlvbnMoKVxyXG4gICAgICAuc29tZShcclxuICAgICAgICAocG9zaXRpb24pID0+XHJcbiAgICAgICAgICBwb3NpdGlvblswXSA9PT0gcGFyc2VJbnQoY2VsbC5kYXRhc2V0LnJvdywgMTApICYmXHJcbiAgICAgICAgICBwb3NpdGlvblsxXSA9PT0gcGFyc2VJbnQoY2VsbC5kYXRhc2V0LmNvbCwgMTApXHJcbiAgICAgICk7XHJcblxyXG4gICAgLy8gYWRkIGFwcHJvcHJpYXRlIGNsYXNzIHRvIGNlbGxcclxuICAgIGlmICh0YWtlbkNlbGwpIHtcclxuICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKFwiaGl0XCIpO1xyXG4gICAgICByZXZlYWxTdXJyb3VuZGluZ0NlbGxzKGJvYXJkLCBjZWxsKTtcclxuICAgIH0gZWxzZSBjZWxsLmNsYXNzTGlzdC5hZGQoXCJtaXNzXCIpO1xyXG4gIH07XHJcblxyXG4gIC8vIGhhbmRsZXMgY2xpY2tzIG9uIGVuZW15IGJvYXJkXHJcbiAgY29uc3QgaGFuZGxlQm9hcmRDbGljayA9IChlKSA9PiB7XHJcbiAgICBjb25zdCBjZWxsID0gZS50YXJnZXQuY2xvc2VzdChcIi5jZWxsXCIpO1xyXG5cclxuICAgIC8vIGlmIG5vIGNlbGwgd2FzIGNsaWNrZWQgZG8gbm90aGluZ1xyXG4gICAgaWYgKCFjZWxsKSByZXR1cm47XHJcblxyXG4gICAgLy8gZG9uJ3QgZXhlY3V0ZSBldmVudCBpZiBnYW1lIGlzIG92ZXIgT1IgdGhlIGJveCBoYXMgYWxyZWFkeSBiZWVuIGNsaWNrZWRcclxuICAgIGlmIChcclxuICAgICAgR2FtZS5pc092ZXIoKSB8fFxyXG4gICAgICBjZWxsLmNsYXNzTGlzdC5jb250YWlucyhcImhpdFwiKSB8fFxyXG4gICAgICBjZWxsLmNsYXNzTGlzdC5jb250YWlucyhcIm1pc3NcIilcclxuICAgIClcclxuICAgICAgcmV0dXJuO1xyXG5cclxuICAgIC8vIGNhbGwgcGxheVJvdW5kIGFuZCBwYXNzIERPTSBpdGVtcyBhcyBhcmd1bWVudHNcclxuICAgIEdhbWUucGxheVJvdW5kKGNlbGwsIHBsYXllckJvYXJkQ29udGFpbmVyKTtcclxuICB9O1xyXG5cclxuICAvLyB1cGRhdGVzIG1lc3NhZ2Ugb24gZGlzcGxheVxyXG4gIGNvbnN0IHVwZGF0ZU1lc3NhZ2UgPSAobWVzc2FnZSkgPT4ge1xyXG4gICAgbWVzc2FnZUNvbnRhaW5lci50ZXh0Q29udGVudCA9IG1lc3NhZ2U7XHJcbiAgfTtcclxuXHJcbiAgLy8gaGFuZGxlcyBwbGF5IGJ1dHRvbiBjbGlja3NcclxuICBjb25zdCBoYW5kbGVQbGF5QnV0dG9uQ2xpY2sgPSAoKSA9PiB7XHJcbiAgICAvLyBoaWRlIHVubmVlZGVkIGJ1dHRvbnNcclxuICAgIHBsYXlCdXR0b24uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgcmFuZG9tQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgIC8vIGFkZCBib2FyZCBldmVudCBsaXN0ZW5lclxyXG4gICAgZW5lbXlCb2FyZENvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgaGFuZGxlQm9hcmRDbGljayk7XHJcbiAgICB1cGRhdGVNZXNzYWdlKFwiTWFrZSB5b3VyIG1vdmUgYnkgY2xpY2tpbmcgdGhlIG9wcG9uZW50J3MgYm9hcmQuXCIpO1xyXG4gIH07XHJcblxyXG4gIC8vIGhhbmRsZXMgcmFuZG9tIGJ1dHRvbiBjbGlja3NcclxuICBjb25zdCBoYW5kbGVSYW5kb21CdXR0b25DbGljayA9ICgpID0+IHtcclxuICAgIEdhbWUuaW5pdGlhbGl6ZU9iamVjdHMoKTtcclxuICAgIGRpc3BsYXlTaGlwcyhHYW1lLmdldFBsYXllcigpLmdldEJvYXJkKCkpO1xyXG4gIH07XHJcblxyXG4gIC8vIGhhbmRsZXMgcmVzZXQgYnV0dG9uIGNsaWNrc1xyXG4gIGNvbnN0IGhhbmRsZVJlc2V0QnV0dG9uQ2xpY2sgPSAoKSA9PiB7XHJcbiAgICAvLyByZXNldCBnYW1lIHZhcmlhYmxlcyBhbmQgYm9hcmQgc3RhdGVcclxuICAgIHJlc2V0Qm9hcmRTdGF0ZSgpO1xyXG4gICAgR2FtZS5pbml0aWFsaXplT2JqZWN0cygpO1xyXG5cclxuICAgIC8vIHVwZGF0ZSBkaXNwbGF5ZWQgc2hpcHNcclxuICAgIGRpc3BsYXlTaGlwcyhHYW1lLmdldFBsYXllcigpLmdldEJvYXJkKCkpO1xyXG5cclxuICAgIC8vIHJlbW92ZSBldmVudCBsaXN0ZW5lciBmb3IgYm9hcmRcclxuICAgIGVuZW15Qm9hcmRDb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGhhbmRsZUJvYXJkQ2xpY2spO1xyXG4gICAgLy8gc2hvdyByZXF1aXJlZCBidXR0b25zIGFnYWluXHJcbiAgICBwbGF5QnV0dG9uLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbiAgICByYW5kb21CdXR0b24uc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuICAgIHVwZGF0ZU1lc3NhZ2UoXCJQbGFjZSBZb3VyIFNoaXBzXCIpO1xyXG4gIH07XHJcblxyXG4gIC8vIGV2ZW50IGxpc3RlbmVyc1xyXG4gIHBsYXlCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGhhbmRsZVBsYXlCdXR0b25DbGljayk7XHJcblxyXG4gIHJlc2V0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBoYW5kbGVSZXNldEJ1dHRvbkNsaWNrKTtcclxuXHJcbiAgcmFuZG9tQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBoYW5kbGVSYW5kb21CdXR0b25DbGljayk7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBhZGRCb2FyZENlbGxzLFxyXG4gICAgZGlzcGxheVNoaXBzLFxyXG4gICAgdXBkYXRlQ2VsbFN0YXRlLFxyXG4gICAgdXBkYXRlTWVzc2FnZSxcclxuICB9O1xyXG59KSgpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgRE9NO1xyXG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgRE9NIGZyb20gXCIuL0RPTVwiO1xyXG5pbXBvcnQgR2FtZSBmcm9tIFwiLi9HYW1lXCI7XHJcbmltcG9ydCBcIi4vc3R5bGVzL3N0eWxlLmNzc1wiO1xyXG5cclxuLy8gY3JlYXRlIGdhbWVib2FyZCBjZWxsc1xyXG5ET00uYWRkQm9hcmRDZWxscygpO1xyXG5cclxuLy8gaW5pdGFsaXplIG9iamVjdHNcclxuR2FtZS5pbml0aWFsaXplT2JqZWN0cygpO1xyXG5cclxuLy8gZGlzcGxheSBwbGF5ZXIgc2hpcHNcclxuRE9NLmRpc3BsYXlTaGlwcyhHYW1lLmdldFBsYXllcigpLmdldEJvYXJkKCkpO1xyXG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIm5jIiwicm93IiwiY29sIiwiYXhpcyIsImhpdHMiLCJoaXQiLCJpc1N1bmsiLCJnZXRDZWxscyIsImNlbGxzIiwiaiIsIm5hbWUiLCJib2FyZCIsIm1vdmVzIiwic2hpcHMiLCJicmQiLCJjcmVhdGVCb2FyZCIsInBsYWNlU2hpcCIsInNoaXAiLCJjZWxsIiwiZm9yRWFjaCIsIm1hcmtTdXJyb3VuZGluZ1Bvc2l0aW9ucyIsImdldFN1cnJvdW5kaW5nUG9zaXRpb25zIiwic3Vycm91bmRpbmdQb3NpdGlvbnMiLCJnZXRUYWtlblBvc2l0aW9ucyIsInRha2VuUG9zaXRpb25zIiwiaXNWYWxpZFBsYWNlbWVudCIsInNvbWUiLCJwb3NpdGlvbiIsInJlY2VpdmVBdHRhY2siLCJhbGxTaGlwc1N1bmsiLCJldmVyeSIsImdldEFsbE1vdmVzIiwiZ2V0U2hpcHMiLCJyYW5kb21pemVTaGlwcyIsInJlbW92ZVNoaXBzIiwic2hpcExlbmd0aHMiLCJwb3AiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJyb3VuZCIsInNlbmRBdHRhY2siLCJjb29yZHMiLCJnZXRSYW5kb21Nb3ZlIiwiZ2V0Qm9hcmQiLCJwbGF5ZXIiLCJlbmVteSIsInBsYXllckJvYXJkIiwiZW5lbXlCb2FyZCIsImlzT3ZlciIsImdldFBsYXllciIsImdldEVuZW15IiwicGxheVJvdW5kIiwicGxheWVyQm9hcmRDb250YWluZXIiLCJwYXJzZUludCIsImRhdGFzZXQiLCJ1cGRhdGVDZWxsU3RhdGUiLCJyYW5kb21Qb3NpdGlvbiIsIndpbm5lciIsInVwZGF0ZU1lc3NhZ2UiLCJpbml0aWFsaXplT2JqZWN0cyIsImJvYXJkQ29udGFpbmVycyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJnZXRFbGVtZW50QnlJZCIsImVuZW15Qm9hcmRDb250YWluZXIiLCJwbGF5QnV0dG9uIiwicmVzZXRCdXR0b24iLCJyYW5kb21CdXR0b24iLCJtZXNzYWdlQ29udGFpbmVyIiwiZGlzcGxheVNoaXBzIiwiY2xhc3NMaXN0IiwidGFyZ2V0Q2VsbCIsImFkZCIsImhhbmRsZUJvYXJkQ2xpY2siLCJjbG9zZXN0IiwiY29udGFpbnMiLCJtZXNzYWdlIiwidGV4dENvbnRlbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiZGlzcGxheSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhZGRCb2FyZENlbGxzIiwicGFyZW50IiwicGFyZW50RWxlbWVudCIsImNoaWxkcmVuIiwiZmlsdGVyIiwic2libGluZyIsImFicyIsImNvcm5lciIsInJldmVhbFN1cnJvdW5kaW5nQ2VsbHMiLCJsb2NhbHMiXSwic291cmNlUm9vdCI6IiJ9