(()=>{"use strict";var e={890:(e,n,t)=>{t.d(n,{Z:()=>u});var r=t(537),o=t.n(r),a=t(645),s=t.n(a),i=t(667),l=t.n(i),c=new URL(t(498),t.b),d=s()(o()),A=l()(c);d.push([e.id,`@font-face {\n  font-family: "Neuropolitical";\n  src: url(${A}) format("opentype");\n  font-weight: 600;\n  font-style: normal;\n}\n\n* {\n  margin: 0;\n  font-family:\n    "Neuropolitical",\n    system-ui,\n    -apple-system,\n    BlinkMacSystemFont,\n    "Segoe UI",\n    Roboto,\n    Oxygen,\n    Ubuntu,\n    Cantarell,\n    "Open Sans",\n    "Helvetica Neue",\n    sans-serif;\n}\n\nbody {\n  min-height: 100vh;\n}\n\n.title {\n  font-size: 4rem;\n  padding: 1rem 2rem;\n}\n\n.body {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 2rem;\n}\n\n.boards {\n  display: flex;\n  justify-content: center;\n  gap: 10rem;\n}\n\n.board-info {\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: auto 1fr;\n  gap: 0.5rem;\n}\n\n.board {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  grid-template-rows: repeat(10, 1fr);\n  grid-row: 1 / 2;\n}\n\n.cell {\n  height: 2rem;\n  width: 2rem;\n  border: 1px solid black;\n}\n\n.player {\n  grid-row: 2 / 3;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 1.3rem;\n}\n\n.ship {\n  background-color: gray;\n}\n\n.ship.dragged {\n  opacity: 0.5;\n}\n\n.hit {\n  background-color: red;\n}\n\n.miss {\n  background-color: aqua;\n}\n\n#message {\n  font-size: 1.75rem;\n}\n\n.buttons {\n  display: flex;\n  gap: 2rem;\n  justify-content: center;\n}\n\nbutton {\n  width: 10rem;\n  height: 4rem;\n  font-size: 1.5rem;\n}\n`,"",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA;EACE,6BAA6B;EAC7B,+DAA6D;EAC7D,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;EACE,SAAS;EACT;;;;;;;;;;;;cAYY;AACd;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,SAAS;AACX;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,UAAU;AACZ;;AAEA;EACE,aAAa;EACb,0BAA0B;EAC1B,4BAA4B;EAC5B,WAAW;AACb;;AAEA;EACE,aAAa;EACb,sCAAsC;EACtC,mCAAmC;EACnC,eAAe;AACjB;;AAEA;EACE,YAAY;EACZ,WAAW;EACX,uBAAuB;AACzB;;AAEA;EACE,eAAe;EACf,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,iBAAiB;AACnB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,SAAS;EACT,uBAAuB;AACzB;;AAEA;EACE,YAAY;EACZ,YAAY;EACZ,iBAAiB;AACnB",sourcesContent:['@font-face {\r\n  font-family: "Neuropolitical";\r\n  src: url("../fonts/neuropolitical rg.otf") format("opentype");\r\n  font-weight: 600;\r\n  font-style: normal;\r\n}\r\n\r\n* {\r\n  margin: 0;\r\n  font-family:\r\n    "Neuropolitical",\r\n    system-ui,\r\n    -apple-system,\r\n    BlinkMacSystemFont,\r\n    "Segoe UI",\r\n    Roboto,\r\n    Oxygen,\r\n    Ubuntu,\r\n    Cantarell,\r\n    "Open Sans",\r\n    "Helvetica Neue",\r\n    sans-serif;\r\n}\r\n\r\nbody {\r\n  min-height: 100vh;\r\n}\r\n\r\n.title {\r\n  font-size: 4rem;\r\n  padding: 1rem 2rem;\r\n}\r\n\r\n.body {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 2rem;\r\n}\r\n\r\n.boards {\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 10rem;\r\n}\r\n\r\n.board-info {\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  grid-template-rows: auto 1fr;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.board {\r\n  display: grid;\r\n  grid-template-columns: repeat(10, 1fr);\r\n  grid-template-rows: repeat(10, 1fr);\r\n  grid-row: 1 / 2;\r\n}\r\n\r\n.cell {\r\n  height: 2rem;\r\n  width: 2rem;\r\n  border: 1px solid black;\r\n}\r\n\r\n.player {\r\n  grid-row: 2 / 3;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 1.3rem;\r\n}\r\n\r\n.ship {\r\n  background-color: gray;\r\n}\r\n\r\n.ship.dragged {\r\n  opacity: 0.5;\r\n}\r\n\r\n.hit {\r\n  background-color: red;\r\n}\r\n\r\n.miss {\r\n  background-color: aqua;\r\n}\r\n\r\n#message {\r\n  font-size: 1.75rem;\r\n}\r\n\r\n.buttons {\r\n  display: flex;\r\n  gap: 2rem;\r\n  justify-content: center;\r\n}\r\n\r\nbutton {\r\n  width: 10rem;\r\n  height: 4rem;\r\n  font-size: 1.5rem;\r\n}\r\n'],sourceRoot:""}]);const u=d},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var i=0;i<this.length;i++){var l=this[i][0];null!=l&&(s[l]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);r&&s[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),n.push(d))}},n}},667:e=>{e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},s=[],i=0;i<e.length;i++){var l=e[i],c=r.base?l[0]+r.base:l[0],d=a[c]||0,A="".concat(c," ").concat(d);a[c]=d+1;var u=t(A),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)n[u].references++,n[u].updater(p);else{var f=o(p,r);r.byIndex=i,n.splice(i,0,{identifier:A,updater:f,references:1})}s.push(A)}return s}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var s=0;s<a.length;s++){var i=t(a[s]);n[i].references--}for(var l=r(e,o),c=0;c<a.length;c++){var d=t(a[c]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}a=l}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},498:(e,n,t)=>{e.exports=t.p+"5ea93bf78c46ef262e82.otf"}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.m=e,t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");if(r.length)for(var o=r.length-1;o>-1&&!e;)e=r[o--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{const e=(e,n,t,r)=>{let o=0;return{length:e,row:n,col:t,axis:r,hit:()=>{o+=1},isSunk:()=>e===o,getCells:()=>{const o=[];if("horizontal"===r)for(let r=t,a=0;a<e;r+=1,a+=1)o.push([n,r]);if("vertical"===r)for(let r=n,a=0;a<e;r+=1,a+=1)o.push([r,t]);return o}}},n=n=>{const t=(()=>{const n=[];let t=[];const r=(()=>{const e=[];for(let n=0;n<10;n+=1){const n=[];for(let e=0;e<10;e+=1)n[e]=null;e.push(n)}return e})(),o=e=>{for(const n of e.getCells()){const[t,o]=n;r[t][o]=e}(e=>{e.getCells().forEach((e=>{const[n,t]=e;for(let e=n-1;e<=n+1;e+=1)for(let n=t-1;n<=t+1;n+=1)e>=0&&e<=9&&n>=0&&n<=9&&null===r[e][n]&&(r[e][n]=0)}))})(e),t.push(e)},a=()=>{const e=[];for(let n=0;n<10;n+=1)for(let t=0;t<10;t+=1)0===r[n][t]&&e.push([n,t]);return e},s=()=>{const e=[];for(let n=0;n<10;n+=1)for(let t=0;t<10;t+=1)r[n][t]&&e.push([n,t]);return e},i=e=>{const n=e.getCells();for(let e=0;e<n.length;e+=1)if(a().some((t=>t[0]===n[e][0]&&t[1]===n[e][1]))||s().some((t=>t[0]===n[e][0]&&t[1]===n[e][1]))||n[e][0]>9||n[e][1]>9)return!1;return!0};return{getCells:()=>r,receiveAttack:(e,t)=>{n.push([e,t]);const o=r[e][t];o&&o.hit()},allShipsSunk:()=>t.every((e=>e.isSunk())),getAllMoves:()=>n,getTakenPositions:s,getShips:()=>t,randomizeShips:()=>{(()=>{for(let e=0;e<10;e+=1)for(let n=0;n<10;n+=1)r[e][n]=null;t=[]})();const n=[2,3,3,4,5];for(;n.length;){const t=n.pop();let r=Math.floor(10*Math.random()),a=Math.floor(10*Math.random());const s=Math.round(Math.random())?"vertical":"horizontal";let l=e(t,r,a,s);for(;!i(l);)r=Math.floor(10*Math.random()),a=Math.floor(10*Math.random()),l=e(t,r,a,s);o(l)}}}})();return{sendAttack:(e,n)=>{const[t,r]=n;e.receiveAttack(t,r)},getRandomMove:()=>[Math.floor(10*Math.random()),Math.floor(10*Math.random())],getBoard:()=>t,name:n}},r=(()=>{let e=n(),t=n(),r=e.getBoard(),a=t.getBoard();const s=()=>r.allShipsSunk()||a.allShipsSunk();return{getPlayer:()=>e,getEnemy:()=>t,isOver:s,playRound:(n,i)=>{let l=parseInt(n.dataset.row,10),c=parseInt(n.dataset.col,10);if(e.sendAttack(a,[l,c]),o.updateCellState(a,n),!a.getCells()[l][c]&&!s())do{let e;do{e=t.getRandomMove()}while(r.getAllMoves().some((n=>n[0]===e[0]&&n[1]===e[1])));t.sendAttack(r,e),[l,c]=e,n=i.querySelector(`.cell[data-row="${l}"][data-col="${c}"]`),o.updateCellState(r,n)}while(r.getCells()[l][c]&&!s());if(s()){const n=r.allShipsSunk()?t:e;o.updateMessage(`Game Over! Winner: ${n.name}`)}},initializeObjects:()=>{e=n("You"),t=n("Opponent"),r=e.getBoard(),a=t.getBoard(),r.randomizeShips(),a.randomizeShips()}}})(),o=(()=>{const e=document.querySelectorAll(".board"),n=document.getElementById("player-board"),t=document.getElementById("enemy-board"),o=document.getElementById("play-button"),a=document.getElementById("reset-button"),s=document.getElementById("random-button"),i=document.getElementById("message"),l=e=>{n.querySelectorAll(".ship").forEach((e=>e.classList.remove("ship")));for(const t of e.getShips()){if("horizontal"===t.axis)for(let e=t.col,r=0;r<t.length;e+=1,r+=1){const r=n.querySelector(`.cell[data-row="${t.row}"][data-col="${e}"]`);r.classList.add("ship"),r.setAttribute("data-size",t.length)}if("vertical"===t.axis)for(let e=t.row,r=0;r<t.length;e+=1,r+=1){const r=n.querySelector(`.cell[data-row="${e}"][data-col="${t.col}"]`);r.classList.add("ship"),r.setAttribute("data-size",t.length)}}},c=e=>{const t=e.target.closest(".cell");t&&(r.isOver()||t.classList.contains("hit")||t.classList.contains("miss")||r.playRound(t,n))},d=e=>{i.textContent=e};return o.addEventListener("click",(()=>{o.style.display="none",s.style.display="none",t.addEventListener("click",c),d("Make your move by clicking the opponent's board.")})),a.addEventListener("click",(()=>{document.querySelectorAll(".cell").forEach((e=>{e.classList.contains("hit")&&e.classList.remove("hit"),e.classList.contains("miss")&&e.classList.remove("miss")})),r.initializeObjects(),l(r.getPlayer().getBoard()),t.removeEventListener("click",c),o.style.display="block",s.style.display="block",d("Place Your Ships")})),s.addEventListener("click",(()=>{r.initializeObjects(),l(r.getPlayer().getBoard())})),{addBoardCells:()=>{e.forEach((e=>{for(let n=0;n<10;n+=1)for(let t=0;t<10;t+=1){const r=document.createElement("div");r.classList.add("cell"),r.setAttribute("data-row",n),r.setAttribute("data-col",t),e.appendChild(r)}}))},displayShips:l,updateCellState:(e,n)=>{e.getTakenPositions().some((e=>e[0]===parseInt(n.dataset.row,10)&&e[1]===parseInt(n.dataset.col,10)))?(n.classList.add("hit"),((e,n)=>{const t=parseInt(n.dataset.row,10),r=parseInt(n.dataset.col,10),o=n.parentElement;[...o.children].filter((e=>1===Math.abs(t-e.dataset.row)&&1===Math.abs(r-e.dataset.col))).forEach((e=>{e.classList.add("miss")})),e.getShips().filter((e=>e.isSunk())).forEach((n=>{n.getCells().forEach((n=>{const[t,r]=n;for(let n=t-1;n<=t+1;n+=1)for(let t=r-1;t<=r+1;t+=1)n>=0&&n<=9&&t>=0&&t<=9&&0===e.getCells()[n][t]&&o.querySelector(`.cell[data-row="${n}"][data-col="${t}"]`).classList.add("miss")}))}))})(e,n)):n.classList.add("miss")},updateMessage:d}})();var a=t(379),s=t.n(a),i=t(795),l=t.n(i),c=t(569),d=t.n(c),A=t(565),u=t.n(A),p=t(216),f=t.n(p),m=t(589),g=t.n(m),h=t(890),y={};y.styleTagTransform=g(),y.setAttributes=u(),y.insert=d().bind(null,"head"),y.domAPI=l(),y.insertStyleElement=f(),s()(h.Z,y),h.Z&&h.Z.locals&&h.Z.locals,o.addBoardCells(),r.initializeObjects(),o.displayShips(r.getPlayer().getBoard())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,