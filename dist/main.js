(()=>{"use strict";var e={890:(e,n,t)=>{t.d(n,{Z:()=>i});var r=t(537),o=t.n(r),a=t(645),s=t.n(a)()(o());s.push([e.id,"* {\n  margin: 0;\n}\n\nbody {\n  min-height: 100vh;\n}\n\n.title {\n  font-size: 4rem;\n  padding: 1rem 2rem;\n}\n\n.body {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 2rem;\n}\n\n.boards {\n  display: flex;\n  justify-content: center;\n  gap: 10rem;\n}\n\n.board-info {\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: auto 1fr;\n  gap: 0.5rem;\n}\n\n.board {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  grid-template-rows: repeat(10, 1fr);\n  grid-row: 1 / 2;\n}\n\n.cell {\n  height: 2rem;\n  width: 2rem;\n  border: 1px solid black;\n}\n\n.player {\n  grid-row: 2 / 3;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 1.3rem;\n}\n\n.ship {\n  background-color: gray;\n}\n\n.hit {\n  background-color: red;\n}\n\n.miss {\n  background-color: aqua;\n}\n\n.message {\n  font-size: 1.75rem;\n}\n\n.buttons {\n  display: flex;\n  gap: 2rem;\n  justify-content: center;\n}\n\nbutton {\n  width: 8rem;\n  height: 4rem;\n  font-size: 1.5rem;\n}\n","",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA;EACE,SAAS;AACX;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,SAAS;AACX;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,UAAU;AACZ;;AAEA;EACE,aAAa;EACb,0BAA0B;EAC1B,4BAA4B;EAC5B,WAAW;AACb;;AAEA;EACE,aAAa;EACb,sCAAsC;EACtC,mCAAmC;EACnC,eAAe;AACjB;;AAEA;EACE,YAAY;EACZ,WAAW;EACX,uBAAuB;AACzB;;AAEA;EACE,eAAe;EACf,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,iBAAiB;AACnB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,SAAS;EACT,uBAAuB;AACzB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,iBAAiB;AACnB",sourcesContent:["* {\r\n  margin: 0;\r\n}\r\n\r\nbody {\r\n  min-height: 100vh;\r\n}\r\n\r\n.title {\r\n  font-size: 4rem;\r\n  padding: 1rem 2rem;\r\n}\r\n\r\n.body {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 2rem;\r\n}\r\n\r\n.boards {\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 10rem;\r\n}\r\n\r\n.board-info {\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  grid-template-rows: auto 1fr;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.board {\r\n  display: grid;\r\n  grid-template-columns: repeat(10, 1fr);\r\n  grid-template-rows: repeat(10, 1fr);\r\n  grid-row: 1 / 2;\r\n}\r\n\r\n.cell {\r\n  height: 2rem;\r\n  width: 2rem;\r\n  border: 1px solid black;\r\n}\r\n\r\n.player {\r\n  grid-row: 2 / 3;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 1.3rem;\r\n}\r\n\r\n.ship {\r\n  background-color: gray;\r\n}\r\n\r\n.hit {\r\n  background-color: red;\r\n}\r\n\r\n.miss {\r\n  background-color: aqua;\r\n}\r\n\r\n.message {\r\n  font-size: 1.75rem;\r\n}\r\n\r\n.buttons {\r\n  display: flex;\r\n  gap: 2rem;\r\n  justify-content: center;\r\n}\r\n\r\nbutton {\r\n  width: 8rem;\r\n  height: 4rem;\r\n  font-size: 1.5rem;\r\n}\r\n"],sourceRoot:""}]);const i=s},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var i=0;i<this.length;i++){var l=this[i][0];null!=l&&(s[l]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);r&&s[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),n.push(d))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},s=[],i=0;i<e.length;i++){var l=e[i],c=r.base?l[0]+r.base:l[0],d=a[c]||0,A="".concat(c," ").concat(d);a[c]=d+1;var u=t(A),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)n[u].references++,n[u].updater(p);else{var m=o(p,r);r.byIndex=i,n.splice(i,0,{identifier:A,updater:m,references:1})}s.push(A)}return s}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var s=0;s<a.length;s++){var i=t(a[s]);n[i].references--}for(var l=r(e,o),c=0;c<a.length;c++){var d=t(a[c]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}a=l}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{const e=e=>{const n=(()=>{const e=[],n=[],t=[],r=(()=>{const e=[];for(let n=0;n<10;n+=1){const n=[];for(let e=0;e<10;e+=1)n[e]=null;e.push(n)}return e})();return{getCells:()=>r,placeShip:(e,n,o,a)=>{const s=(e=>{let n=0;return{length:e,hit:()=>{n+=1},getHits:()=>n,isSunk:()=>e===n}})(e);if("horizontal"===a)for(let t=o,a=0;a<e;t+=1,a+=1)r[n][t]=s;if("vertical"===a)for(let t=n,a=0;a<e;t+=1,a+=1)r[t][o]=s;t.push(s)},receiveAttack:(t,o)=>{n.push([t,o]);const a=r[t][o];a?a.hit():e.push([t,o])},getMissedAttacks:()=>e,allShipsSunk:()=>t.every((e=>e.isSunk())),getAllMoves:()=>n,getEmptyPositions:()=>{const e=[];for(let n=0;n<9;n+=1)for(let t=0;t<9;t+=1)null===r[n][t]&&e.push([n,t]);return e},getTakenPositions:()=>{const e=[];for(let n=0;n<9;n+=1)for(let t=0;t<9;t+=1)null!==r[n][t]&&e.push([n,t]);return e}}})();let t=!1;return{sendAttack:(e,n)=>{const[t,r]=n;e.receiveAttack(t,r)},getRandomMove:()=>[Math.floor(10*Math.random()),Math.floor(10*Math.random())],isTurn:()=>t,startTurn:()=>{t=!0},endTurn:()=>{t=!1},getBoard:()=>n,name:e}},n=(()=>{let n=e(),t=e(),r=n.getBoard(),a=t.getBoard();const s=()=>r.allShipsSunk()||a.allShipsSunk();return{getPlayer:()=>n,getEnemy:()=>t,isOver:s,playRound:(e,i)=>{let l=parseInt(e.dataset.row,10),c=parseInt(e.dataset.col,10);if(n.sendAttack(a,[l,c]),o.updateCellState(a,e),!a.getCells()[l][c]&&!s())do{let n;do{n=t.getRandomMove()}while(r.getAllMoves().some((e=>e[0]===n[0]&&e[1]===n[1])));t.sendAttack(r,n),[l,c]=n,e=i.querySelector(`.cell[data-row="${l}"][data-col="${c}"]`),o.updateCellState(r,e)}while(r.getCells()[l][c]&&!s());const d=r.allShipsSunk()?t:n;s()&&o.updateMessage(`Game Over! Winner: ${d.name}`)},switchTurn:()=>{n.isTurn()?(n.endTurn(),t.startTurn()):(t.endTurn(),n.startTurn())},initializeObjects:()=>{n=e("You"),t=e("Opponent"),r=n.getBoard(),a=t.getBoard(),r.placeShip(5,0,0,"horizontal"),r.placeShip(4,2,0,"horizontal"),r.placeShip(3,4,0,"horizontal"),r.placeShip(3,6,0,"horizontal"),r.placeShip(2,8,0,"horizontal"),a.placeShip(5,0,0,"horizontal"),a.placeShip(4,2,0,"horizontal"),a.placeShip(3,4,0,"horizontal"),a.placeShip(3,6,0,"horizontal"),a.placeShip(2,8,0,"horizontal")}}})(),r=n,o=(()=>{const e=document.querySelectorAll(".board"),n=document.getElementById("player-board"),t=document.getElementById("enemy-board"),o=document.getElementById("play-button"),a=document.getElementById("reset-button"),s=document.getElementById("random-button"),i=document.getElementById("message"),l=e=>{const t=e.target.closest(".cell");t&&(r.isOver()||t.classList.contains("hit")||t.classList.contains("miss")||r.playRound(t,n))},c=e=>{i.textContent=e};return o.addEventListener("click",(()=>{o.style.display="none",s.style.display="none",t.addEventListener("click",l),c("Make your move by clicking the opponent's board.")})),a.addEventListener("click",(()=>{document.querySelectorAll(".cell").forEach((e=>{e.classList.contains("hit")&&e.classList.remove("hit"),e.classList.contains("miss")&&e.classList.remove("miss")})),r.initializeObjects(),t.removeEventListener("click",l),o.style.display="block",s.style.display="block",c("Place Your Ships")})),{addBoardCells:()=>{e.forEach((e=>{for(let n=0;n<10;n+=1)for(let t=0;t<10;t+=1){const r=document.createElement("div");r.classList.add("cell"),r.setAttribute("data-row",n),r.setAttribute("data-col",t),e.appendChild(r)}}))},displayShips:e=>{for(const[t,r]of e.getTakenPositions())n.querySelector(`.cell[data-row="${t}"][data-col="${r}"]`).classList.add("ship")},updateCellState:(e,n)=>{e.getTakenPositions().some((e=>e[0]===parseInt(n.dataset.row,10)&&e[1]===parseInt(n.dataset.col,10)))?n.classList.add("hit"):n.classList.add("miss")},updateMessage:c}})();var a=t(379),s=t.n(a),i=t(795),l=t.n(i),c=t(569),d=t.n(c),A=t(565),u=t.n(A),p=t(216),m=t.n(p),f=t(589),h=t.n(f),g=t(890),y={};y.styleTagTransform=h(),y.setAttributes=u(),y.insert=d().bind(null,"head"),y.domAPI=l(),y.insertStyleElement=m(),s()(g.Z,y),g.Z&&g.Z.locals&&g.Z.locals,o.addBoardCells(),r.initializeObjects();const E=r.getPlayer().getBoard();o.displayShips(E)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,