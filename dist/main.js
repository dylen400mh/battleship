(()=>{"use strict";var e={890:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(537),o=n.n(r),a=n(645),s=n.n(a)()(o());s.push([e.id,"* {\n  margin: 0;\n}\n\nbody {\n  min-height: 100vh;\n}\n\n.title {\n  font-size: 4rem;\n  padding: 1rem 2rem;\n}\n\n.body {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 2rem;\n}\n\n.boards {\n  display: flex;\n  justify-content: center;\n  gap: 10rem;\n}\n\n.board-info {\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: auto 1fr;\n  gap: 0.5rem;\n}\n\n.board {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  grid-template-rows: repeat(10, 1fr);\n  grid-row: 1 / 2;\n}\n\n.cell {\n  height: 2rem;\n  width: 2rem;\n  border: 1px solid black;\n}\n\n.player {\n  grid-row: 2 / 3;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 1.3rem;\n}\n\n.ship {\n  background-color: gray;\n}\n\n.ship.dragged {\n  opacity: 0.5;\n}\n\n.hit {\n  background-color: red;\n}\n\n.miss {\n  background-color: aqua;\n}\n\n#message {\n  font-size: 1.75rem;\n}\n\n.buttons {\n  display: flex;\n  gap: 2rem;\n  justify-content: center;\n}\n\nbutton {\n  width: 8rem;\n  height: 4rem;\n  font-size: 1.5rem;\n}\n","",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA;EACE,SAAS;AACX;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,SAAS;AACX;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,UAAU;AACZ;;AAEA;EACE,aAAa;EACb,0BAA0B;EAC1B,4BAA4B;EAC5B,WAAW;AACb;;AAEA;EACE,aAAa;EACb,sCAAsC;EACtC,mCAAmC;EACnC,eAAe;AACjB;;AAEA;EACE,YAAY;EACZ,WAAW;EACX,uBAAuB;AACzB;;AAEA;EACE,eAAe;EACf,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,iBAAiB;AACnB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,SAAS;EACT,uBAAuB;AACzB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,iBAAiB;AACnB",sourcesContent:["* {\r\n  margin: 0;\r\n}\r\n\r\nbody {\r\n  min-height: 100vh;\r\n}\r\n\r\n.title {\r\n  font-size: 4rem;\r\n  padding: 1rem 2rem;\r\n}\r\n\r\n.body {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 2rem;\r\n}\r\n\r\n.boards {\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 10rem;\r\n}\r\n\r\n.board-info {\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  grid-template-rows: auto 1fr;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.board {\r\n  display: grid;\r\n  grid-template-columns: repeat(10, 1fr);\r\n  grid-template-rows: repeat(10, 1fr);\r\n  grid-row: 1 / 2;\r\n}\r\n\r\n.cell {\r\n  height: 2rem;\r\n  width: 2rem;\r\n  border: 1px solid black;\r\n}\r\n\r\n.player {\r\n  grid-row: 2 / 3;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 1.3rem;\r\n}\r\n\r\n.ship {\r\n  background-color: gray;\r\n}\r\n\r\n.ship.dragged {\r\n  opacity: 0.5;\r\n}\r\n\r\n.hit {\r\n  background-color: red;\r\n}\r\n\r\n.miss {\r\n  background-color: aqua;\r\n}\r\n\r\n#message {\r\n  font-size: 1.75rem;\r\n}\r\n\r\n.buttons {\r\n  display: flex;\r\n  gap: 2rem;\r\n  justify-content: center;\r\n}\r\n\r\nbutton {\r\n  width: 8rem;\r\n  height: 4rem;\r\n  font-size: 1.5rem;\r\n}\r\n"],sourceRoot:""}]);const i=s},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var i=0;i<this.length;i++){var l=this[i][0];null!=l&&(s[l]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);r&&s[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},s=[],i=0;i<e.length;i++){var l=e[i],c=r.base?l[0]+r.base:l[0],d=a[c]||0,A="".concat(c," ").concat(d);a[c]=d+1;var u=n(A),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)t[u].references++,t[u].updater(p);else{var f=o(p,r);r.byIndex=i,t.splice(i,0,{identifier:A,updater:f,references:1})}s.push(A)}return s}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var s=0;s<a.length;s++){var i=n(a[s]);t[i].references--}for(var l=r(e,o),c=0;c<a.length;c++){var d=n(a[c]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}a=l}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{const e=(e,t,n,r)=>{let o=0;return{length:e,hit:()=>{o+=1},getHits:()=>o,isSunk:()=>e===o,row:t,col:n,axis:r,getCells:()=>{const o=[];if("horizontal"===r)for(let r=n,a=0;a<e;r+=1,a+=1)o.push([t,r]);if("vertical"===r)for(let r=t,a=0;a<e;r+=1,a+=1)o.push([r,n]);return o}}},t=t=>{const n=(()=>{const t=[];let n=[];const r=(()=>{const e=[];for(let t=0;t<10;t+=1){const t=[];for(let e=0;e<10;e+=1)t[e]=null;e.push(t)}return e})(),o=e=>{for(const t of e.getCells()){const[n,o]=t;r[n][o]=e}(e=>{e.getCells().forEach((e=>{const[t,n]=e;for(let e=t-1;e<=t+1;e+=1)for(let t=n-1;t<=n+1;t+=1)e>=0&&e<=9&&t>=0&&t<=9&&null===r[e][t]&&(r[e][t]=0)}))})(e),n.push(e)},a=()=>{const e=[];for(let t=0;t<10;t+=1)for(let n=0;n<10;n+=1)0===r[t][n]&&e.push([t,n]);return e},s=()=>{const e=[];for(let t=0;t<10;t+=1)for(let n=0;n<10;n+=1)r[t][n]&&e.push([t,n]);return e},i=e=>{const t=e.getCells();for(let e=0;e<t.length;e+=1)if(a().some((n=>n[0]===t[e][0]&&n[1]===t[e][1]))||s().some((n=>n[0]===t[e][0]&&n[1]===t[e][1]))||t[e][0]>9||t[e][1]>9)return!1;return!0},l=()=>{for(let e=0;e<10;e+=1)for(let t=0;t<10;t+=1)r[e][t]=null;n=[]};return{getCells:()=>r,placeShip:o,receiveAttack:(e,n)=>{t.push([e,n]);const o=r[e][n];o&&o.hit()},allShipsSunk:()=>n.every((e=>e.isSunk())),getAllMoves:()=>t,getTakenPositions:s,getShips:()=>n,randomizeShips:()=>{l();const t=[2,3,3,4,5];for(;t.length;){const n=t.pop();let r=Math.floor(10*Math.random()),a=Math.floor(10*Math.random());const s=Math.round(Math.random())?"vertical":"horizontal";let l=e(n,r,a,s);for(;!i(l);)r=Math.floor(10*Math.random()),a=Math.floor(10*Math.random()),l=e(n,r,a,s);o(l)}},getSurroundingPositions:a,removeShips:l}})();return{sendAttack:(e,t)=>{const[n,r]=t;e.receiveAttack(n,r)},getRandomMove:()=>[Math.floor(10*Math.random()),Math.floor(10*Math.random())],getBoard:()=>n,name:t}},r=(()=>{let e=t(),n=t(),r=e.getBoard(),a=n.getBoard();const s=()=>r.allShipsSunk()||a.allShipsSunk();return{getPlayer:()=>e,getEnemy:()=>n,isOver:s,playRound:(t,i)=>{let l=parseInt(t.dataset.row,10),c=parseInt(t.dataset.col,10);if(e.sendAttack(a,[l,c]),o.updateCellState(a,t),!a.getCells()[l][c]&&!s())do{let e;do{e=n.getRandomMove()}while(r.getAllMoves().some((t=>t[0]===e[0]&&t[1]===e[1])));n.sendAttack(r,e),[l,c]=e,t=i.querySelector(`.cell[data-row="${l}"][data-col="${c}"]`),o.updateCellState(r,t)}while(r.getCells()[l][c]&&!s());const d=r.allShipsSunk()?n:e;s()&&o.updateMessage(`Game Over! Winner: ${d.name}`)},initializeObjects:()=>{e=t("You"),n=t("Opponent"),r=e.getBoard(),a=n.getBoard(),r.randomizeShips(),a.randomizeShips()}}})(),o=(()=>{const e=document.querySelectorAll(".board"),t=document.getElementById("player-board"),n=document.getElementById("enemy-board"),o=document.getElementById("play-button"),a=document.getElementById("reset-button"),s=document.getElementById("random-button"),i=document.getElementById("message"),l=e=>{t.querySelectorAll(".ship").forEach((e=>e.classList.remove("ship")));for(const n of e.getShips()){if("horizontal"===n.axis)for(let e=n.col,r=0;r<n.length;e+=1,r+=1){const r=t.querySelector(`.cell[data-row="${n.row}"][data-col="${e}"]`);r.classList.add("ship"),r.setAttribute("data-size",n.length)}if("vertical"===n.axis)for(let e=n.row,r=0;r<n.length;e+=1,r+=1){const r=t.querySelector(`.cell[data-row="${e}"][data-col="${n.col}"]`);r.classList.add("ship"),r.setAttribute("data-size",n.length)}}},c=e=>{const n=e.target.closest(".cell");n&&(r.isOver()||n.classList.contains("hit")||n.classList.contains("miss")||r.playRound(n,t))},d=e=>{i.textContent=e};return o.addEventListener("click",(()=>{o.style.display="none",s.style.display="none",n.addEventListener("click",c),d("Make your move by clicking the opponent's board.")})),a.addEventListener("click",(()=>{document.querySelectorAll(".cell").forEach((e=>{e.classList.contains("hit")&&e.classList.remove("hit"),e.classList.contains("miss")&&e.classList.remove("miss")})),r.initializeObjects(),l(r.getPlayer().getBoard()),n.removeEventListener("click",c),o.style.display="block",s.style.display="block",d("Place Your Ships")})),s.addEventListener("click",(()=>{r.initializeObjects(),l(r.getPlayer().getBoard())})),{addBoardCells:()=>{e.forEach((e=>{for(let t=0;t<10;t+=1)for(let n=0;n<10;n+=1){const r=document.createElement("div");r.classList.add("cell"),r.setAttribute("data-row",t),r.setAttribute("data-col",n),e.appendChild(r)}}))},displayShips:l,updateCellState:(e,t)=>{e.getTakenPositions().some((e=>e[0]===parseInt(t.dataset.row,10)&&e[1]===parseInt(t.dataset.col,10)))?(t.classList.add("hit"),((e,t)=>{const n=parseInt(t.dataset.row,10),r=parseInt(t.dataset.col,10),o=t.parentElement;[...o.children].filter((e=>1===Math.abs(n-e.dataset.row)&&1===Math.abs(r-e.dataset.col))).forEach((e=>{e.classList.add("miss")})),e.getShips().filter((e=>e.isSunk())).forEach((t=>{t.getCells().forEach((t=>{const[n,r]=t;for(let t=n-1;t<=n+1;t+=1)for(let n=r-1;n<=r+1;n+=1)t>=0&&t<=9&&n>=0&&n<=9&&0===e.getCells()[t][n]&&o.querySelector(`.cell[data-row="${t}"][data-col="${n}"]`).classList.add("miss")}))}))})(e,t)):t.classList.add("miss")},updateMessage:d}})();var a=n(379),s=n.n(a),i=n(795),l=n.n(i),c=n(569),d=n.n(c),A=n(565),u=n.n(A),p=n(216),f=n.n(p),m=n(589),h=n.n(m),g=n(890),y={};y.styleTagTransform=h(),y.setAttributes=u(),y.insert=d().bind(null,"head"),y.domAPI=l(),y.insertStyleElement=f(),s()(g.Z,y),g.Z&&g.Z.locals&&g.Z.locals,o.addBoardCells(),r.initializeObjects(),o.displayShips(r.getPlayer().getBoard())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,